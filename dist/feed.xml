<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thomas Rigby</title>
  <subtitle>When I&#39;m not building things for the internet, I take photos of stuff.</subtitle>
  <link href="https://thomasrigby.com/feed.xml" rel="self"/>
  <link href="https://thomasrigby.com/"/>
  <updated>2022-09-07T00:00:00Z</updated>
  <id>https://thomasrigby.com/</id>
  <author>
    <name>Thomas Rigby</name>
    <email>rss@scrummable.com</email>
  </author>
    
    <entry>
      <title>Mobile-first is the future of web design</title>
      <link href="https://thomasrigby.com/articles/mobile-first-is-the-future-of-web-design/"/>
      <id>https://thomasrigby.com/articles/mobile-first-is-the-future-of-web-design/</id>
      <published>2014-12-06T21:48:57Z</published>
      <updated>2014-12-06T21:48:57Z</updated>
      <summary type="html">
        &lt;p&gt;One of the main issues I have come across in the last three years of building marketing emails is that mobile responsive versions of emails are treated as an after-thought. Often a highly talented designer draws up a beautiful desktop version and then it is left to the interactive developer to whittle away at the &lt;/p&gt; 
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/kfyC96wKOH-300.jpeg" alt="Mobile-first is the future of web design" />
          
          <div class="intro"><p>One of the main issues I have come across in the last three years of building marketing emails is that mobile responsive versions of emails are treated as an after-thought. Often a highly talented designer draws up a beautiful desktop version and then it is left to the interactive developer to whittle away at the design to create the “mobile version”.</p></div>
<p>Mobile isn’t a watered-down version of desktop – it is a vital and flourishing platform that deserves equal weight and merit. Perhaps, given the figures, more weight should be attributed to so-called “mobile versions” of emails.</p>
<p>A US consumer device preference study (Q3 2013) determined that 65% of emails are now opened on mobile device – smart phone, tablet, or laptop. This figure is up from 61% the previous year, showing a definite trend towards mobile interaction. The majority of smartphone users check their emails once an hour from 8am to 9pm with almost 60% of this being during traditional working hours (9am to 6pm) and almost 40% of users spend approximately 15 seconds viewing each email. What this shows is that a lot of people are checking their inboxes regularly but briefly.</p>
<p>Although individual metrics vary from company to company, and even campaign to campaign, IBM subsidiary and emarketing giants <a href="http://www.silverpop.com/" target="_blank" rel="noopener noreferrer">SilverPop</a> estimate that around 80% of emails aren’t even opened and, of those, less than 4% result in a click. A recent Google survey showed that 52% of users are less likely to engage when an email has been poorly optimized or not optimized at all, and a massive 48% of users actually became frustrated and annoyed saying that poor mobile-responsiveness was an “indication of the business simply not caring”.</p>
<p>With this in mind, it simply makes sense to have an emarketing campaign that is well-optimised for mobile devices.</p>
<h3>Reverse the Process: Mobile-first Design</h3>
<p>Mobile devices have a variety of quirks that can cause havoc with design, for example screens dimmed to save battery can make text hard to read unless the text/background visual contrast is over 80%.</p>
<p>Mobile devices differ from desktops, on the whole, by not having finger-friendly typewriter-style keyboards and precise cursors to help the user navigate around – relying on the user jabbing at the screen with fingers, thumbs, or a stylus.</p>
<p></p><div id="attachment_199" style="width: 610px" class="wp-caption alignnone"><img src="https://thomasrigby.com/images/scrummable_06-600x400.jpg" style="aspect-ratio: 600/400" /><p id="caption-attachment-199" class="wp-caption-text">Using a phone with a thumb (other branded smartphones are available)</p></div><p></p>
<p>A quick poll around the office this morning determined (in a highly-questionable “scientific” manner) that 15 people click links with their finger, 16 use their thumb, and a whopping zero use a stylus. The <a title="Massachusetts Institute of Technology" href="http://web.mit.edu/" target="_blank" rel="noopener noreferrer">Massachusetts Institute of Technology</a> held a study of human fingertips to investigate the Mechanics of Tactile Sense, which found that the average adult fingertip is around 50px wide, and the average thumb is 72px. A quick look around the internet brings up a fair few pages with “suggested” sizes for mobile buttons: <a title="Apple" href="https://www.apple.com/uk/" target="_blank" rel="noopener noreferrer">Apple</a> recommend 44px, <a title="Microsoft" href="https://www.microsoft.com/en-gb/default.aspx" target="_blank" rel="noopener noreferrer">Microsoft</a> suggest 34px, and good old <a title="Nokia" href="http://company.nokia.com/en" target="_blank" rel="noopener noreferrer">Nokia</a> knock that down to 28px – less than half the width of the average thumb. The prevalence of auto-correct is testament to the average user’s lack of precision!</p>
<p>HTML emails are built primarily from images – .jpgs, .pngs, and .gifs, which look fantastic but, as email clients are the devil, can cause issues. Almost all email clients do not download images automatically. Of the six big desktop clients (Apple Mail, <a title="IBM Notes" href="http://www-03.ibm.com/software/products/en/ibmnotes" target="_blank" rel="noopener noreferrer"><span style="text-decoration: line-through;">Lotus Notes</span> IBM Notes</a>, <a title="Mozilla Thunderbird" href="https://www.mozilla.org/en-GB/thunderbird/" target="_blank" rel="noopener noreferrer">Thunderbird</a>, and various Outlooks) only two download images by default. Of the four big web-based clients (AOL, Gmail, Outlook.com, and Yahoo) over half block images – indeed, Gmail discovered that 43% of their users browse emails with images-off as standard. On mobile devices it gets worse with 12 out of 19 clients replacing gorgeous images with ugly red x’s. Replacing calls-to-action with HTML-styled text buttons means that your CTA is always visible – perhaps not quite as pretty as the original design but better than a blank page.</p>
<p>Email newsletters litter their copy with text links which, while good practice for website SEO, seems rather unnecessary on an email given the suggested font-size is around 16px (roughly 12pt – or 1em if you want to get all technical) making them considerably more difficult to hit with an unwieldy thumb while you’re standing up on a crowded train heading to work.</p>
<p>The <a title="The Baymard Institute" href="http://baymard.com/" target="_blank" rel="noopener noreferrer">Baymard Institute</a> discovered that the optimal line length is around 50 to 75 characters (including spaces) – if a line is too long, the reader will zone out, if it is too short their reading rhythm is thrown off. Another thing to bear in mind is that some mobile devices force a text-resize for fonts below 13px that potentially disrupts carefully planned layouts. As different operating systems and email clients render text in different ways, allowing for flexibility in the live build will produce an email that works across the board.</p>
<h3>If you don’t need it on the mobile version, do you need it on the desktop version?</h3>
<p>Starting a design with the “mobile version” and restructuring the content as the space increases allows an email to be succinct, relevant, and easy to digest. Given you have 15 seconds to get your message across on a screen around 3” by 5”, easy-to-digest content becomes paramount.</p>
<p>Which brings me on to email menus: Users don’t treat emails like websites – they scan the content of the email and decide if there’s anything worth clicking on. With Landscape to Portrait usage being roughly 50/50, and minimum landscape height being around 320px, do you really need that nav bar taking up valuable CTA real estate?</p>
<h3>tl;dr:</h3>
<p>Design a mobile-friendly email first – big buttons, high-contrast, minimal copy, optimised for images-off; then work out how to display that on a bigger screen.</p>
<h4>Edit:</h4>
<p>Following <a title="Google.com" href="http://googlewebmastercentral.blogspot.co.uk/2015/02/finding-more-mobile-friendly-search.html" target="_blank" rel="noopener noreferrer">the recent announcement from Google</a> that mobile-friendly designs will rank approximately 30% higher than desktop-only sites, it seems all the more important to consider the implications of mobile-first design.</p>
<p><em>&#8220;Starting April 21, we will be expanding our use of mobile-friendliness as a ranking signal. This change will affect mobile searches in all languages worldwide and will have a significant impact in our search results. Consequently, users will find it easier to get relevant, high quality search results that are optimized for their devices.&#8221; <strong>~ Google</strong></em></p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Design Fatigue: When bored doesn&#8217;t mean boring</title>
      <link href="https://thomasrigby.com/articles/design-fatigue-when-bored-doesnt-mean-boring-2/"/>
      <id>https://thomasrigby.com/articles/design-fatigue-when-bored-doesnt-mean-boring-2/</id>
      <published>2015-02-12T09:53:45Z</published>
      <updated>2015-02-12T09:53:45Z</updated>
      <summary type="html">
        &lt;p&gt;Jakob&amp;#8217;s Law states that visitors to your website spend most of their online time on other peoples websites. Who spends the most time on your website? &amp;#8211; you do. Whether you&amp;#8217;re the developer, designer, or MD, no-one spends as much time on your site as you think they do (or wish they would). This leads &lt;/p&gt; 
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/yGB1-R_iRj-300.jpeg" alt="Design Fatigue: When bored doesn&#8217;t mean boring" />
          
          <div class="intro"><p><a href="http://www.nngroup.com/articles/end-of-web-design/" target="_blank" rel="noopener noreferrer">Jakob&#8217;s Law</a> states that visitors to your website spend most of their online time on other peoples websites. Who spends the most time on your website? &#8211; you do.</p></div>
<p>Whether you&#8217;re the developer, designer, or MD, no-one spends as much time on your site as you think they do (or wish they would). This leads to an interesting impediment called <em>design fatigue</em>. When you look at something for long enough it gets boring &#8211; no matter how much you loved it to begin with, it begins to look dull and stale. However, the important thing to note is that your visitors do not have this problem.</p>
<p></p><div id="attachment_43" style="width: 610px" class="wp-caption alignnone"><img src="https://thomasrigby.com/images/scrummable_Bored-of-content-marketing-600x481.jpg" style="aspect-ratio: 600/481" /><p id="caption-attachment-43" class="wp-caption-text">This lady is bored of design. So very bored.</p></div><p></p>
<p>When looking at developing a new website, first ask yourself the question &#8220;Why do I want a new website?&#8221; If the answer is along the lines of &#8220;It&#8217;s been like this for a couple of years&#8221; you need to really think if you want to invest time, effort, and money* into rejigging the whole thing. Is an entire rebuild necessary? Could you get away with a quick reskinning of the design into something a little more contemporary? If you have serious concern over the validity of the content or the difficulty end users may have finding things on your website, <b><i>then</i></b> consider an in-depth overhaul of the whole structure.</p>
<p><span style="font-size: 13px;">* With the average salary of £25,000 for a web developer (UK), assuming a development time of roughly a month, your website will cost you upwards of £2000. That&#8217;s also assuming you have an in-house developer &#8211; outsourcing to a development house may well cost you much more!</span></p>
<p>I&#8217;m not one for talking myself out of work &#8211; I love coding websites and finding jazzy new techniques for improving the user experience; technology and languages are developing so quickly that websites can appear dated quite quickly, but I&#8217;d go for continual, small tweaks regularly rather than a large overhaul every couple of years every time.</p>
<h3>tl;dr</h3>
<p>Just because you&#8217;re bored of seeing the same layout day-after-day doesn&#8217;t mean your end user is and certainly doesn&#8217;t mean you should rebuild your website every few months. Spend a little time upfront to secure a timeless layout that can be iterated on rather than leaping from fad to fad and your website will stand the test of time.</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>The more you are of the moment, the quicker you are of the past</title>
      <link href="https://thomasrigby.com/articles/the-more-you-are-of-the-moment-the-quicker-you-are-of-the-past/"/>
      <id>https://thomasrigby.com/articles/the-more-you-are-of-the-moment-the-quicker-you-are-of-the-past/</id>
      <published>2015-03-18T19:43:41Z</published>
      <updated>2015-03-18T19:43:41Z</updated>
      <summary type="html">
        &lt;p&gt;Everyone who ever got that haircut in high school just wanted to be cool. Look back at photos of some of the decisions you made in the name of “fashion” and you’ll understand the title of this article. We’re talking about the downside of cutting-edge technology. Bleeding-edge tech is cool! As a self-confessed tech nerd, &lt;/p&gt; 
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/3d9Dtam7aH-300.jpeg" alt="The more you are of the moment, the quicker you are of the past" />
          
          <div class="intro"><p>Everyone who ever got <em>that</em> haircut in high school just wanted to be cool. Look back at photos of some of the decisions you made in the name of “fashion” and you’ll understand the title of this article. We’re talking about the downside of cutting-edge technology.</p></div>
<p></p><div id="attachment_108" style="width: 610px" class="wp-caption alignnone"><img src="https://thomasrigby.com/images/scrummable_hmprod-600x400.jpg" style="aspect-ratio: 600/400" /><p id="caption-attachment-108" class="wp-caption-text">&#8220;That&#8221; haircut!</p></div><p></p>
<h3>Bleeding-edge tech is cool!</h3>
<p>As a self-confessed tech nerd, I get excited at the newest, shiniest development in… well, development. However inappropriate I really, really want to incorporate it into whatever project I’m currently working on. Refactoring an entire site to be Apple Watch compatible, scouring the web for the Next-Big-Thing in web design &#8211; parallax, salmon pink, enormous &lt;video&gt; backgrounds, working out if this blog is usable with Google Glass (probably not!). Seriously, I’ve tried to shoehorn <em>all</em> of these things into a single website. The thing is &#8211; sure, that site looks <strong>amazeballs</strong>… for about a week. Fingers crossed, it’ll be cool long enough for <a href="http://www.awwwards.com/">Awwwards</a> to notice it but, ask yourself, honestly &#8211; hand-on-heart &#8211; does your client <em>need</em> all of this bumf?</p>
<p>It all ties back to <a href="http://www.scrummable.com/making-like-a-mob-boss-knowing-your-problem-and-how-to-fix-it-2/">the end goal of the site</a>. It may be that the client wants a rapidly-dating, awwward-winning website and, hopefully, they’ll come back to you next month for the replacement because the trendiest color has changed and they want to “re-brand”. More often than not, though, a client wants to achieve something grander than that. Awards for being awesome are lovely but they’re not the be-all and end-all of your brand &#8211; just ask <a href="https://uk.yahoo.com/movies/s/6-reasons-leonardo-dicaprio-has-never-won-an-oscar-091733412.html">Leonardo DiCaprio</a>!</p>
<h3></h3>
<h3>Mind your fingers on the cutting edge</h3>
<p>As with the bread-and-butter elements of design; typography, imagery, and layout, bleeding-edge techniques should be used when relevant and <strong>at no other time</strong>. You wouldn’t consider using this week’s <em>font-du-jour</em> without justification, so why <span style="text-decoration: line-through;"><a href="http://www.hongkiat.com/blog/web-design-trend-2013/">fixed headers</a></span> <span style="text-decoration: line-through;"><a href="http://www.gibedigital.com/blog/2013/september/02/is-parallax-scrolling-web-design-dead/">parallax backgrounds</a></span> <a href="http://www.itworld.com/article/2900889/web-design-trend-predictions-for-2016-2017.html">Material Design</a>…?</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Backdoor Action: The Death of the Homepage?</title>
      <link href="https://thomasrigby.com/articles/backdoor-action-the-death-of-the-homepage/"/>
      <id>https://thomasrigby.com/articles/backdoor-action-the-death-of-the-homepage/</id>
      <published>2015-07-22T13:20:02Z</published>
      <updated>2015-07-22T13:20:02Z</updated>
      <summary type="html">
        &lt;p&gt;Google (other search engines are available) loves content. There&amp;#8217;s a whole industry (or at least a facet of digital marketing) that has sprung up around Content Marketing that puts emphasis on copy-rich pages to draw consumers in. Content marketing is a strategic marketing approach focused on creating and distributing valuable, relevant, and consistent content to &lt;/p&gt; 
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/9e_fgFaC1l-300.jpeg" alt="Backdoor Action: The Death of the Homepage?" />
          
          <div class="intro"><p>Google (other search engines are available) loves content. There&#8217;s a whole industry (or at least a facet of digital marketing) that has sprung up around Content Marketing that puts emphasis on copy-rich pages to draw consumers in.</p></div>
<blockquote>
<p>Content marketing is a strategic marketing approach focused on creating and distributing valuable, relevant, and consistent content to attract and retain a clearly-defined audience — and, ultimately, to drive profitable customer action. <a href="http://contentmarketinginstitute.com/what-is-content-marketing/" target="_blank" rel="noopener noreferrer">The Content Marketing Institute</a></p>
</blockquote>
<p>People look, for example, for &#8220;stakeholder management&#8221;, not &#8220;The Superduper Business Analysis Company&#8221;. And as such they are much more likely to hit on one of your blog posts than your homepage. Similarly, the prevalence of social sharing networks means that people are more likely to put one of your articles / photos / posts on their Facebook / Twitter / Instagram / Google+ (maybe) than they are to &#8220;share&#8221; your homepage.</p>
<p></p><div id="attachment_214" style="width: 610px" class="wp-caption alignnone"><img src="https://thomasrigby.com/images/scrummable_shop-window-600x450.jpg" style="aspect-ratio: 600/450" /><p id="caption-attachment-214" class="wp-caption-text">Captivate the passers-by with a lovely display</p></div><p></p>
<p>A homepage is traditionally a shop window; sprinkle a little bit of everything on it to give people a taste of who you are, what you do, and how well you do it &#8211; and impress them enough and they&#8217;ll click through to another page. This was the primary user journey in the early noughties, and to be fair still is in many cases. I can think of a few sites I regularly go straight to the homepage of and browse around from there; amazon.co.uk, BBC iPlayer, Netflix, Google (obviously!). But these are all large-scale, well-known sites that benefit from their established prestige. The majority of other sites I frequent, stackoverflow, Creative Bloq, Metro, etc. I get to from search results for specific things; from articles posted on news aggregation apps and from social media. I genuinely have no idea what stackoverflow&#8217;s homepage looks like!</p>
<p>Media giant <a title="The New York Times" href="http://www.nytimes.com/" target="_blank" rel="noopener noreferrer">The New York Times</a> has reported a drop in homepage activity of around 10% over a three year period, citing the majority of their traffic coming from search engines resulting in specific pages being targeted. <a title="Buzzfeed UK" href="http://www.buzzfeed.com/?country=uk" target="_blank" rel="noopener noreferrer">Buzzfeed</a>&#8216;s &#8220;side-door&#8221; traffic accounts for over a third of activity, and The <a title="Wall Street Journal" href="http://www.wsj.com/europe" target="_blank" rel="noopener noreferrer">Wall Street Journal</a> indicates less than half (around 40%) of their traffic hits the homepage. Admittedly, these are all news sites, and the rise of readily available push-based snippets of news through social media can account for some of the drop. But the trend remains apparent; readers target individual articles rather than browsing from the &#8220;start&#8221; of your site.</p>
<p>Studying the impact this has on the traditional user journey draws an interesting conclusion &#8211; the well-establish flow from homepage to page via navigation appears to be on the way out.</p>
<p>I&#8217;m not saying that you shouldn&#8217;t put effort into a homepage; a <a title="Wrist" href="http://www.wrist.im/" target="_blank" rel="noopener noreferrer">well-thought-out homepage</a> can truly be <a title="Pomodrone" href="http://www.pomodrone.com/" target="_blank" rel="noopener noreferrer">a thing of beauty</a>, but considering your content and audience how many people are really going to see it?</p>
<p>To summarise; as our benevolent supreme leader Google gets more and more powerful, a significant number of users make their way onto your site via pages other than your homepage. OK, I&#8217;m not quite ready to declare the homepage dead just yet &#8211; but I am willing to stick my neck out and suggest that if you have a content-rich or article-based site, it should be further down your list of priorities when designing or building a site.</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>MNMLSM: Simplify, simplify some more, then start simplifying</title>
      <link href="https://thomasrigby.com/articles/mnmlsm-simplify-simplify-some-more-then-start-simplifying/"/>
      <id>https://thomasrigby.com/articles/mnmlsm-simplify-simplify-some-more-then-start-simplifying/</id>
      <published>2015-08-05T12:32:50Z</published>
      <updated>2015-08-05T12:32:50Z</updated>
      <summary type="html">
        &lt;p&gt;Minimalism is an interesting thing &amp;#8211; far from meaning as stark as possible, minimalism is the idea of removing anything unnecessary for base level functionality. Imagine a human face. Now remove all of the details you can until it still resembles a human face. If, for example, you took the eyes out and it looks &lt;/p&gt; 
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/RC33cjrkyd-300.jpeg" alt="MNMLSM: Simplify, simplify some more, then start simplifying" />
          
          <div class="intro"><p>Minimalism is an interesting thing &#8211; far from meaning as stark as possible, minimalism is the idea of removing anything unnecessary for base level functionality. Imagine a human face. Now remove all of the details you can until it still resembles a human face. If, for example, you took the eyes out and it looks wrong, stick them back in. Once you&#8217;ve finished you have minimalism. <a href="https://www.pinterest.com/explore/minimalist-architecture/" target="_blank" rel="noopener noreferrer">Buildings</a>, <a href="https://en.wikipedia.org/wiki/Minimalism" target="_blank" rel="noopener noreferrer">paintings</a>, <a href="http://www.vandelaydesign.com/beautiful-minimalist-websites/" target="_blank" rel="noopener noreferrer">web design</a> can all implement (and benefit from) minimalism. So can code.</p></div>
<p>When I started coding for a living I had no idea about loops. The last year of solidly building WordPress sites has taught me a lot. I still start my code the same way I used to code though. I write everything out longhand, then work out the commonalities and parse them as variables, arrays, and loops. Then I start cutting out the duplicated code. Once I have this, I can start working out what I can cut from where to make my code as small and as simple as possible.</p>
<h3>Who wants a DRY KISS*?</h3>
<p>Every single developer! The reuse of code improves performance, makes updating easier &#8211; especially if the project gets passed to someone else when you&#8217;re inevitably hit by that bus that everyone goes on about, and benefits consistency across the design.</p>
<blockquote>
<p>&#8220;Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.&#8221;</p>
</blockquote>
<p>Everyone knows that deadlines get in the way of perfection and sometimes it&#8217;s necessary to chuck something in that works rather than delay everything to produce code that will make other developers moist. This is where Technical Debt comes in. Set aside some time after deployment to tidy up your code. Think of it like throwing all of the stuff from your floor into a wardrobe when your mum visits. Your flat will pass muster for the duration of her visit but, if you don&#8217;t go and sort that wardrobe out once she&#8217;s gone, you&#8217;ll be in for a world of pain later on!</p>
<p></p><div id="attachment_325" style="width: 610px" class="wp-caption aligncenter"><a href="http://www.scrummable.com/wp-content/uploads/2015/08/immaculate-bedroom.jpg"><img src="https://thomasrigby.com/images/scrummable_immaculate-bedroom-600x400.jpg" style="aspect-ratio: 600/400" /></a><p id="caption-attachment-325" class="wp-caption-text">There are unimaginable horrors lurking behind those wardrobe doors!</p></div><p></p>
<p>It&#8217;s like CSS classes; you wouldn&#8217;t apply identical styles to two elements when you could assign the same class to them and only write one bit of CSS, so why do it with your PHP or JavaScript? I start by breaking a build down into independent functions. Then breaking those independent functions down into independent pieces of functionality. This allows me to reuse a function again and again. For example, on one site I built recently, we needed a <a href="http://www.netflix.com/" target="_blank" rel="noopener noreferrer">Netflix</a>-style &#8216;bookshelf&#8217; that scrolled sideways. This had to start on click of a button or swipe on a touch-screen. It also had to work on several &#8216;shelves&#8217; independently of each other. By separating the function that made the shelf slide, I could call that one function on each shelf for each method of initiation. This made this one function simple to adjust, easy to replace if a better solution presented itself, and extensible for use on infinite shelves.</p>
<p></p><div id="attachment_338" style="width: 609px" class="wp-caption aligncenter"><a href="http://www.scrummable.com/wp-content/uploads/2015/08/reusable.png"><img src="https://thomasrigby.com/images/scrummable_reusable.png" style="aspect-ratio: 599/398" /></a><p id="caption-attachment-338" class="wp-caption-text">Code, like Dr Evil, is better when&#8217;s it&#8217;s Mini Me</p></div><p></p>
<p><a href="https://en.wikipedia.org/wiki/Andy_Hunt_(author)" target="_blank" rel="noopener noreferrer">Andy Hunt</a> and <a href="https://en.wikipedia.org/wiki/Dave_Thomas_(author)" target="_blank" rel="noopener noreferrer">Dave Thomas</a> originally intended their principle for use in software engineering but it is sound practice for almost all aspects of development. Keeping your code clean, reusable, and &#8211; above all &#8211; simple, makes for better code and, by extension, better websites.</p>
<p>* <strong>D</strong>on&#8217;t <strong>R</strong>epeat <strong>Y</strong>ourself and <strong>K</strong>eep <strong>I</strong>t <strong>S</strong>imple <strong>S</strong>tupid</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Can&#8217;t see the wood for the trees</title>
      <link href="https://thomasrigby.com/articles/cant-see-the-wood-for-the-trees/"/>
      <id>https://thomasrigby.com/articles/cant-see-the-wood-for-the-trees/</id>
      <published>2015-09-07T11:46:16Z</published>
      <updated>2015-09-07T11:46:16Z</updated>
      <summary type="html">
        &lt;p&gt;Long, long ago in a galaxy far, far away, websites ran the gamut from the bland to the Flash™-y and everyone wanted to make them better. Way back in them olden days, there were so many ways to improve the hideousness that some websites were, and so the web design industry flourished. Everyone clamoured for &lt;/p&gt; 
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/kQdkaSF6Ks-300.jpeg" alt="Can&#8217;t see the wood for the trees" />
          
          <div class="intro"><p>Long, long ago in a galaxy far, far away, websites ran the gamut from the bland to the Flash™-y and everyone wanted to make them better. Way back in them olden days, there were so many ways to improve the hideousness that some websites were, and so the web design industry flourished. Everyone clamoured for the best website &#8211; chasing the elusive &#8216;best&#8217; like a dog chasing cars.</p></div>
<p>The funny thing about &#8216;best&#8217; is that its definition changes. It&#8217;s subjective; for some, best is &#8220;generates the most revenue&#8221;, for others it&#8217;s related to speed and performance, others still prize <a href="http://www.lingscars.com/" target="_blank" rel="noopener noreferrer">beautiful graphics</a> over anything else. And influencable (Is that a word? It is now) &#8211; some clients can be steered down a certain path by designers, developers, analysts foisting their definition of &#8216;best&#8217; onto the undecided and uninformed.</p>
<h2>Google vs Independent Thought</h2>
<p>Arguments abound over Material Design and the idea that Google is &#8216;forcing&#8217; people to design everything the same way. I rather like Material Design but, in my not-so-humble opinion, it&#8217;s not the be-all and end-all of future web design. What it <i>could be</i> useful for is tapping that wealth of knowledge. Google has spent a fortune researching all of this and, save <a href="http://tech.firstpost/news-analysis/15-things-google-got-wrong/106036.html" target="_blank" rel="noopener noreferrer">a few clangers</a>, they&#8217;re pretty good at what they do. Considering they have cash you can only dream of to throw at research and they&#8217;re pretty consistent with their continuing success, why wouldn&#8217;t you pinch a few ideas?</p>
<blockquote>
<p>In a world where everyone can design and develop, we bicker over minutiae to gain a 0.01% lead over competitors.</p>
</blockquote>
<p>Like with films and novels, unless it&#8217;s part of your profession to critique, you only notice really bad things or really good things. It stands to reason that overcrowding your site with graphics and text will make it harder for your customer to find anything. If your body copy is 8px apple green <a href="http://www.bbc.co.uk/news/magazine-11582548" target="_blank" rel="noopener noreferrer">Comic Sans</a> on a bright red background and you&#8217;re hiding your most important call-to-action within the copy, you kind of deserve to have no customers! Beyond things like this, almost everything else isn&#8217;t critiqued. Sure there are some things that jump out as special but mostly you&#8217;re focusing on the journey, not the view. The aim of your site, function-wise, should be that every user remembers your site but no one remembers using it. Bickering over whether or not adding an extra 4px to the margin on a button to achieve a 0.01% return on investment (ROI) is slightly pointless. In short, seamless user journeys are far more important than font size. As long as you don&#8217;t balls it up royally, your site will be fine.</p>
<p></p><div id="attachment_343" style="width: 230px" class="wp-caption aligncenter"><a href="http://www.scrummable.com/wp-content/uploads/2015/08/comic-sans.jpg"><img src="https://thomasrigby.com/images/scrummable_comic-sans.jpg" style="aspect-ratio: 220/200" /></a><p id="caption-attachment-343" class="wp-caption-text">Every time you use Comic Sans, a bunny gets punched in the face. Apparently.</p></div><p></p>
<p>Take <a href="http://jmunderwood.com/" target="_blank" rel="noopener noreferrer">jmunderwood.com</a> for example &#8211; a WordPress blog run by a funny guy dying of cancer. I don&#8217;t imagine many people go to his website and complain that it&#8217;s fairly generic &#8211; design-wise &#8211; or that maybe he could do with adhering to a more contemporary style or that it&#8217;s a little stark and the font is a little too small (note to self: stop critiquing.). Anyway, the people that go to this site are after his words not his layout. It is readable and that&#8217;s pretty much all it needs to be.</p>
<h3>Web design is dead. Long live web design.</h3>
<p>The prevalence of themes and UI kits may mean a devaluing of web design but it does allow a new world order of King Content to reign supreme. In a way, a return to the old <a href="http://gizmodo.com/5983574/remember-the-hilarious-horror-of-geocities-with-this-website" target="_blank" rel="noopener noreferrer">GeoCities</a> universe of people with ideas getting them into the world with little effort. We&#8217;re at a point now where most sites look pretty good so where can you make improvements?</p>
<p>The places you <i>can</i> make massive differences are in the functionality of the site and by improving the experience of the end user. Streamlining processes such as sign-in or checkout, micro-interactions to provide instant feedback to users like instant form-field validation, and simplifying the navigation process to get your users where they want to go more easily, are the touch-points of your site it makes the most sense to invest in.</p>
<p>This may well get me death threats from some precious designers but, sod it, there are enough gorgeous templates that actually work without much effort to spend weeks working out your padding and colour-scheme instead of focusing on the important things &#8211; your end user and the purpose of your site.</p>
<p></p><div id="attachment_346" style="width: 610px" class="wp-caption aligncenter"><a href="http://www.scrummable.com/wp-content/uploads/2015/08/death-threat.jpg"><img src="https://thomasrigby.com/images/scrummable_death-threat-600x338.jpg" style="aspect-ratio: 600/338" /></a><p id="caption-attachment-346" class="wp-caption-text">My inbox eagerly awaits&#8230;</p></div><p></p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>The Build Triangle: Understanding Limitations</title>
      <link href="https://thomasrigby.com/articles/the-build-triangle-understanding-limitations/"/>
      <id>https://thomasrigby.com/articles/the-build-triangle-understanding-limitations/</id>
      <published>2016-01-24T11:09:52Z</published>
      <updated>2016-01-24T11:09:52Z</updated>
      <summary type="html">
        &lt;p&gt;In an ideal world, everything we build would be perfect &amp;#8211; gorgeous code, on time, and under budget but most of us don’t live in a Disney utopia. Unfortunately, the real world chips away at our resolve and something has to give. Part of good stakeholder management is managing expectations and part of managing expectations &lt;/p&gt; 
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/XO6Mdxh_cL-300.jpeg" alt="The Build Triangle: Understanding Limitations" />
          
          <div class="intro"><p>In an ideal world, everything we build would be perfect &#8211; gorgeous code, on time, and under budget but most of us don’t live in a Disney utopia. Unfortunately, the real world chips away at our resolve and something has to give. Part of good stakeholder management is managing expectations and part of managing expectations is acknowledging limitations.</p></div>
<p><img src="https://thomasrigby.com/images/scrummable_build_triangle-600x600.png" style="aspect-ratio: 600/600" /><br />
This is the Build Triangle, a device applicable to almost any form of production. The basic premise that anything that can be produced can be produced well, quickly, or cheaply &#8211; but never all three. This holds true for websites, buildings, shoes, food&#8230;anything!</p>
<p>The trick is to work out which of the three you can do most without: Do you have a tight deadline and a small budget? Then, sorry, but you’re not going to get all of the bells and whistles! Do you have thousands of pounds going spare and are happy with it going live whenever? In that case, we can give you an all-singing, all-dancing extravaganza! Does it have to be live tomorrow and definitely ground-breaking cutting-edge perfection? Sure, but it’ll cost you!</p>
<p>Educating clients will manage their expectations, and allow you to effectively manage the delivery of the product with as few headaches as possible.</p>
<p>Where you can make tackle the issue is by iterating. Start with something good and fast, then work towards making it great. This will draw the cost out over a protracted period but ultimately leave you with the best of all worlds! This doesn&#8217;t mean you&#8217;re giving the client something rubbish to begin with but, through education, guiding a client down this route will be beneficial all round. The client starts to fulfil their KPIs sooner, the cost is spread over a longer period, the development will improve with each iteration based on real-life feedback.</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Micro-interactions to delight and annoy</title>
      <link href="https://thomasrigby.com/articles/micro-interactions-to-delight-and-annoy/"/>
      <id>https://thomasrigby.com/articles/micro-interactions-to-delight-and-annoy/</id>
      <published>2016-01-28T13:00:15Z</published>
      <updated>2016-01-28T13:00:15Z</updated>
      <summary type="html">
        &lt;p&gt;Can your UI harm your UX? Let&amp;#8217;s find out&amp;#8230;&lt;/p&gt; 
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/fJWlZ7tE3F-300.jpeg" alt="Micro-interactions to delight and annoy" />
          
          <div class="intro"><p>The be-all-and-end-all of user interactions, way back in the day, were hover states. Position your cursor over an element and it&#8217;ll change in someway to indicate that it does something.</p></div>
<p>Un-styled links in all browsers still have the same four states:</p>
<ul>
<li>normal (blue)</li>
<li>hovered (cursor becomes a little hand)</li>
<li>active (red)</li>
<li>visited (purple)</li>
</ul>
<p>These states exist to give the user a visual indication that their actions are having an effect. Through CSS and JavaScript, we can manipulate these styles and make a variety of fancy interactions; from different colours to animations.</p>
<p>From these humble beginnings, interactions grew into the all-singing/all-dancing world of the modern user interface. Micro-interactions followed on from this &#8211; those unobtrusive little helpers dotted around applications that make life easier and make using an interface intuitive and seamless.</p>
<p>For example, Gmail gives you a warning if you say attached in an email but don&#8217;t actually attach something, spell-checkers underline misspelled words for you, images on websites zoom/change colour/blur/rotate/turn into videos on hover to indicate that they do something, the Slack app only sends push notifications when the desktop app is closed or you&#8217;re idle, the list goes on…</p>
<h2>The Good Side</h2>
<p>Obviously, there are micro-interactions that are helpful: Instant form-field validation &#8211; reminding you that email addresses have an @ in them when you move out of the email field, for example. WordPress has recently introduced saving a post when pressing CTRL-S (CMD-S on a Mac). These, largely unobtrusive, micro-interactions make for a nicer, more fluid, experience.</p>
<h3>Helpers and Delighters</h3>
<p>Interactions can be broken down into two broad groups: Helpers and Delighters. Helpers anticipate user behaviour and make suggestions. We mostly don&#8217;t even notice them (except when they go wrong!). These would include:</p>
<ul>
<li>Suggested search terms</li>
<li>automatic form completion</li>
<li>swipe to dismiss/archive/delete</li>
<li>converting emoticons into emojis (and yes, they&#8217;re different!)</li>
<li>&#8220;user_name is typing&#8221; in instant messaging clients</li>
</ul>
<p>Delighters are distinctly non-functional micro-interactions that make the user experience nicer. Usually taking the form of animations, in-jokes, or little humanising touches. Some examples are:</p>
<ul>
<li>un-read notifications indicator on the icon (similarly number of items in a checkout basket)</li>
<li>BBC iPlayer&#8217;s volume <a href="https://youtu.be/KOO5S4vxi0o">goes up to 11</a></li>
<li>Outlook&#8217;s &#8220;You&#8217;ve reached Inbox Zero!&#8221; message on emptying your inbox</li>
<li>Videostream&#8217;s friendly, nerdy, and amusing loading messages</li>
</ul>
<p>Some have become so prevalent that I now notice when they&#8217;re not included &#8211; like pull-to-refresh in a lot of mobile apps.</p>
<h3>The lie that is loading indicators</h3>
<p>Whether it&#8217;s spinning wheels, morphing blobs, or the more traditional horizontal bar filling up, we&#8217;ve all seen loading indicators but how many of us are aware that they&#8217;re a huge lie?</p>
<p>An extension of the <a href="https://en.wikipedia.org/wiki/Gantt_chart">Gannt chart</a>, they were adopted by the digital world following a <a href="https://en.wikipedia.org/wiki/Brad_Myers">paper published by Brad Myers</a> in the mid-eighties that concluded users felt decreased anxiety given an indication that something was happening in the background. File transfer rates over a network (especially the internet or wi-fi) are too unreliable to accurately calculate remaining time so, rather than bother, most contemporary progress bars or loading indicators are simply an arbitrary indicator that the software hasn&#8217;t frozen rather than an indication of actual activity &#8211; called &#8216;throbbers&#8217; in the industry.</p>
<p>It&#8217;s a lie but, given it reduces user disengagement, I think it&#8217;s a good lie.</p>
<p><img src="https://thomasrigby.com/images/scrummable_spinnnnnn.gif" style="aspect-ratio: 214/206" /></p>
<p><cite>Chris Coyier</cite></p>
<h2>The Dark Side</h2>
<p>What is the dark-side of micro-interaction? Ranging from the irritating to the detrimental, there are occasions where this nanny-state of development isn&#8217;t necessarily the best thing for users. With the prevalence of netspeak/textspeak (OMG, WTF, non moar bad spel than this!), spell-checkers start to highlight everything! Admittedly, this is being negated by applications adding frequently used phrases to custom dictionaries, but it can be irritating when an app tells me that I&#8217;ve spelled my girlfriend&#8217;s name wrong!</p>
<p>Highlighting a product name on ao.com presents a pop-up advertising their Price-Match scheme. I imagine there are some people that would be impressed or helped by this but it bugs me!</p>
<p><img src="https://thomasrigby.com/images/scrummable_ao-price_match.png" style="aspect-ratio: 862/379" /></p>
<p>Highlighting text on Metro Lyrics brings up the option to post on Facebook, Twitter, or Google+. However, they&#8217;ve chopped off half the quote and replaced it with a link to their own site. This isn&#8217;t helpful to me at all!</p>
<p><img src="https://thomasrigby.com/images/scrummable_metro_lyrics-social_media.png" style="aspect-ratio: 673/341" /></p>
<p><img src="https://thomasrigby.com/images/scrummable_metro_lyrics-twitter_post.png" style="aspect-ratio: 516/171" /></p>
<h3>Helpful IOS</h3>
<p>The IOS mail client automatically turns dates, any number, and addresses into links that hook into the calendar, dialler, and maps applications respectively. This is all well and good but can be annoying when copyright dates and company HQ addresses in promotional emails are turned into links making them more prominent than they should be or when the blue font is rendered unreadable against the background colour. More annoyingly, when an account number is turned into a click-to-call phone number to nowhere! This is such an issue that <code>&lt;meta content="telephone=no" name="format-detection"&gt;</code> exists to counter it.</p>
<h3>Hijacking UI</h3>
<p>Hijacking well-established actions in a user interface is another way to annoy people! Changing the scroll direction, or redirecting the &#8216;Back&#8217; button to an advert, and displaying a &#8220;Sign up to our newsletter&#8221; pop-up half-way through an article (or when your cursor heads towards the address bar/back button) are all ways to get people&#8217;s backs up.</p>
<h2>The Future</h2>
<p>So, how do I see the future of micro-interaction? Despite the flaws, some of which I&#8217;ve pointed out here, they are definitely here to stay. But how can they develop? I see a lot of effort going in to make them more accurate. Google is already ahead of the curve on this one &#8211; the bordering-on-the-creepy-ness of Google Now is a good example: scanning emails and calendars, offering travel tips based on your commute to work and the time of day, and generally automatically organising your life so you don&#8217;t have to bother.</p>
<p>Factoring in wearable tech and the Internet of Things, I envisage watches telling you to go to the door just as the postman arrives, automated replies to invitations when you&#8217;re double-booked, cars that drive you home from work without prompting, houses that automate lights/heating/music/run a bath based on who has just walked in, where they&#8217;ve come from and what they&#8217;re most likely to want.</p>
<p>Tech knows you&#8217;ve just got home from work, your calendar has been back-to-back meetings all day, it&#8217;s raining outside, and your train was half-an-hour late! So, when you walk through your front door, the heating is on, a bath is run, soothing music is playing, and the kettle&#8217;s just boiled.</p>
<p>We&#8217;re becoming steadily more connected with technology, technology is learning more and more about us and our habits and routines, and this will inevitably lead to helpful interactions getting better at judging what we&#8217;re most likely to do in a given situation. And, along side that, those tiny little personal touches will continue to delight us.</p>
<h2>Conclusion</h2>
<p>The purpose of a micro-interaction is to humanise the interface, provide instant feedback, to keep the user &#8216;in the loop&#8217; so they feel engaged. There are occasions where applications can be too &#8220;helpful&#8221;. For every user that is helped, there will be someone annoyed by the exact same thing. I know what I&#8217;m doing, I don&#8217;t need a nanny-state suggesting I&#8217;m doing things incorrectly all <span style="border-bottom: 1px dashed #ff0000;">teh</span> <span style="border-bottom: 1px dashed #ff0000;">timez</span>.</p>
<p><cite> <strong>This post was originally posted on <a href="http://www.shoot-the-moon.co.uk/blog/micro-interactions-to-delight-and-annoy/">shoot-the-moon.co.uk</a></strong> </cite></p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Why is a soap bubble round? Or: When and where to use square bubbles</title>
      <link href="https://thomasrigby.com/articles/why-is-a-soap-bubble-round-or-when-and-where-to-use-square-bubbles/"/>
      <id>https://thomasrigby.com/articles/why-is-a-soap-bubble-round-or-when-and-where-to-use-square-bubbles/</id>
      <published>2016-02-29T10:11:55Z</published>
      <updated>2016-02-29T10:11:55Z</updated>
      <summary type="html">
        &lt;p&gt;The laws of physics, those undeniable laws of the universe that we can&amp;#8217;t help but abide by, make round soap bubbles. They make green grass and wet water and rainbows that can only be seen between 40 and 42 degrees. These are templates crafted over millennia that just simply work. Flippantly, websites are the same. &lt;/p&gt; 
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/9vU-Z-2skW-300.jpeg" alt="Why is a soap bubble round? Or: When and where to use square bubbles" />
          
          <div class="intro"><p>The laws of physics, those undeniable laws of the universe that we can&#8217;t help but abide by, make round soap bubbles. They make green grass and wet water and rainbows that can only be seen between 40 and 42 degrees. These are templates crafted over millennia that just simply work.</p></div>
<p>Flippantly, websites are the same. Logos in the top left, horizontal navigation just under the logo, copyright information right at the bottom of the page, buttons that look like buttons, search bars with a magnifying glass, etc. These are all things designers, UX specialists and developers have crafted, broken, modified and, importantly, taught users to use since the dawn of the web. They are tried-and-tested best practices that we&#8217;ve all learned to deal with. So, you&#8217;ve got a new website to build &#8211; do you copy/paste the last site you built, change the colours and deploy it or open up a blank Photoshop (other graphic design software is available) document and delve deep into your creative conscious for something truly mind-blowing? When should you use a square bubble?</p>
<p><img src="https://thomasrigby.com/images/scrummable_square_bubble-600x338.jpeg" style="aspect-ratio: 600/338" /></p>
<h2>The awards for design, creativity and innovation on the Internet</h2>
<p><a href="http://awwwards.com/">Awwwards.com</a>&#8216;s mission is &#8220;to discover, recognize, and promote the talent and effort of web designers, developers, and agencies who create unique digital experiences that are useful, innovative, intuitive, and beautiful.&#8221; and their site is full of examples of truly stunning works of art. A quick flick through the winners page shows a range of eye-catching techniques in use such as full-screen video, lush parallax and animation, immersive interaction, and a fair few lovely examples of messing around with typography. One thing they all seem to have in common, however, is that they&#8217;re predominantly portfolio or brochure sites &#8211; nice marketing tools, occasionally existing only for the duration of a campaign before rotting away on a server behind long-forgotten login details.</p>
<p>By contrast, the world’s <a href="http://www.dollarfry.com/worlds-top-10-ecommerce-sites-alexa-rank-basis/">top ranking e-commerce sites</a> all look a bit naff in comparison. But &#8211; and it&#8217;s a big but (no sniggering!) &#8211; they work. I&#8217;ll stick with <a href="http://www.amazon.co.uk/">Amazon</a> here, partly because they&#8217;re number one on the list and partly because I use Amazon all the time so I feel more confident in dissecting their site. I don&#8217;t think there&#8217;ll be much disagreement when I suggest that don&#8217;t imagine amazon.co.uk winning any awards for their &#8220;useful, innovative, intuitive, and beautiful&#8221; website.</p>
<p></p><div id="attachment_422" style="width: 610px" class="wp-caption aligncenter"><img src="https://thomasrigby.com/images/scrummable_side_by_side_comparison-amazon_publicis90-600x221.png" style="aspect-ratio: 600/221" /><p id="caption-attachment-422" class="wp-caption-text">Amazon vs Publicis90: The Great Homepage War 2016™</p></div><p></p>
<p>Amazon takes the traditional approach &#8211; logo top left, search bar, hero carousel. This is a layout you’ll find floating around the internet like so many round bubbles.</p>
<p>In contrast <a href="http://www.publicis90.com/#/publicis90">Publicis90</a> have filled half of their screen real-estate with their logo and hidden the navigation almost completely until you click the little down arrow at the bottom. Incidentally, they draw your attention to this subtle button with a slick loading animation that builds the button as the content is served in the background. Irritatingly, the page doesn’t appear to scroll down when you click the down button but new elements animate into the screen.</p>
<p>While I’ve been writing this article, I’ve been back to the Publicis90 website a few times and, by now, it’s starting to annoy me &#8211; it seems to have been designed for very infrequent use. It <i>does</i> look beautiful, the animation is smooth and fluid and, for all my complaining about the hidden navigation, it doesn’t take more than a second two figure out what you’re doing. It’s been well put together &#8211; I don’t want this to be seen as any sort of negative critique of this particular site!</p>
<p>Amazon has invested heavily in its one solitary goal &#8211; selling things. Craig Smith over at <a href="http://expandedramblings.com/index.php/amazon-statistics/">Expanded Ramblings suggests that 44% of online shoppers</a> go directly to Amazon to make a purchase which may well account for their <a href="https://www.quantcast.com/amazon.com">2.7 million average daily hit rate</a>. Amazon has employed a wealth of tricks and clever thinking into making it appear that their site loads super-fast &#8211; no soothing animations or loading bars here because jazzy animation here is a barrier to sales.</p>
<p>For Publicis90 on the other hand, the demographic they’re aiming for (digital creatives looking for funding) are more likely to follow the site through to its conclusion than be put-off by the measured pace of page loads.</p>
<p>The most interesting thing to note is that Amazon actually loads slower. There was a factoid floating around the internet a while ago that <a href="http://www.fastcompany.com/1825005/how-one-second-could-cost-amazon-16-billion-sales">Amazon loses $1.6 billion dollars a year</a> for every second their page load slows down. Again, a lot of effort has gone in to deferring loading of elements to fool the user into thinking it’s loaded quickly enough to save them $1.6 billion.</p>
<p></p><div id="attachment_420" style="width: 530px" class="wp-caption aligncenter"><img src="https://thomasrigby.com/images/scrummable_screenshot-page_load-amazon-520x600.png" style="aspect-ratio: 520/600" /><p id="caption-attachment-420" class="wp-caption-text">Amazon takes around 40 seconds to load &#8211; though you wouldn&#8217;t know it!</p></div><br />
<div id="attachment_421" style="width: 610px" class="wp-caption aligncenter"><img src="https://thomasrigby.com/images/scrummable_screenshot-page_load-publicis90-600x272.png" style="aspect-ratio: 600/272" /><p id="caption-attachment-421" class="wp-caption-text">Pulicis90 comes in at around a second.</p></div><p></p>
<h2>Design is beautiful, design is practical.</h2>
<p>This is not too say that ecommerce sites can&#8217;t be beautiful. There are some lovely lush examples around but beauty and practicality aren&#8217;t mutually exclusive. Publicis90&#8217;s site certainly has practical elements: it renders well on mobile devices with large thumbable links and a slick, smooth, although pared-down animation on navigating around.</p>
<p>One site that strikes a nice balance is <a href="http://www.netflix.com/browse">Netflix</a>. The video-on-demand giant’s website combines traditional &#8211; logo in the top left, account and search in the top right, copyright at the bottom &#8211; with a quirky sideways-scrolling ‘bookshelf’ navigation that has reeled in 75 million users in <a href="https://www.youtube.com/watch?v=RDrfE9I8_hs">almost</a> <a href="https://help.netflix.com/en/node/14164">every country on earth</a>.</p>
<h2>The right tool for the right job</h2>
<blockquote>
<p>When it comes to the internet, there’s no such thing as a one-size-fits-all approach.</p>
</blockquote>
<p>The best way to decide whether you want to go for something ground-breaking or more traditional is to apply the old adage <i>the right tool for the right job</i>. When it comes to the internet, there’s no such thing as a one-size-fits-all approach. Consider your user, <a href="http://www.scrummable.com/making-like-a-mob-boss-knowing-your-problem-and-how-to-fix-it-2/">consider your goals</a>, and create the right solution to solve the problem.</p>
<p><img src="https://thomasrigby.com/images/scrummable_right_tool_for_the_right_job-600x402.jpg" style="aspect-ratio: 600/402" /></p>
<p>Few things will drive users away from your site (and to one of your competitors) than using the inappropriate solution. However pretty your e-commerce site is, speed and durability come first. Likewise, few will be impressed by your creative portfolio if it looks like a discount supermarket.</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>5 Reasons People Read Articles with Numbers in the Title</title>
      <link href="https://thomasrigby.com/articles/5-reasons-people-read-articles-with-numbers-in-the-title-2/"/>
      <id>https://thomasrigby.com/articles/5-reasons-people-read-articles-with-numbers-in-the-title-2/</id>
      <published>2016-04-28T15:01:43Z</published>
      <updated>2016-04-28T15:01:43Z</updated>
      <summary type="html">
        &lt;p&gt;Using numbers in the title of a blog post is an excellent way of giving the (potential) reader an estimate of article length. 6 reasons&amp;#8230; will take less time to read than 22 reasons&amp;#8230; The nerds behind blogging platform Medium determined that the ideal blog post length is 7 minutes.&lt;/p&gt; 
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/A-RpfnWF7n-300.jpeg" alt="5 Reasons People Read Articles with Numbers in the Title" />
          
          <div class="intro"><p>Using numbers in the title of a blog post is an excellent way of giving the (potential) reader an estimate of article length. <b>6 reasons&#8230; </b>will take less time to read than <b>22 reasons&#8230;</b> The nerds behind blogging platform Medium determined that <a title="The optimal post length is 7 minutes" href="https://medium.com/data-lab/the-optimal-post-is-7-minutes-74b9f41509b#.jaszyyo9w">the ideal blog post length is 7 minutes</a>. This doesn&#8217;t mean you should treat this as Gospel because blah blah blah blah.</p></div>
<p>OK, I’ll admit it &#8211; you’ve been conned. There <i>is</i> evidence that numbers in the title generate an increase in click-through-rate but we’re talking a jump from 0.0% to 0.2% &#8211; nothing to <span style="text-decoration: line-through;">write home</span> blog about! This article is more about the myth of SEO and Content Marketing.</p>
<h2>Goooooooooooooogle</h2>
<p>Not breaking the habit of a lifetime, I’ll start by saying something controversial. Forget about SEO.</p>
<p>For the uninitiated, SEO is Search Engine Optimisation &#8211; the simple idea that there are ways to fool Google into thinking your site is more relevant than it is. It’s a service offered by many marketing companies as well as being an add-on for web design companies and some companies even specialise in it. I say SEO is verging on a con because Google <b>never</b> publish their algorithms that determine where sites ranks.</p>
<p>Love it or hate it, Google have a stranglehold on the concept of “searching”, to the point it’s <a href="http://www.merriam-webster.com/dictionary/google">synonymous</a> with the idea of looking for something on the internet. It makes sense that if most people find sites via search engines, that ranking highly on those search engines will drive traffic to your site.</p>
<h2>If you write it, they will come</h2>
<p>Pushy sales strategies are generally unwelcome &#8211; the shiny-suited geezer on your doorstep with a folder of insurance policies and a bullish &#8220;never-accept-no&#8221; attitude shouldn&#8217;t <em>ever</em> be the best representation of your company. Marketing blog, <a href="http://www.valuablecontent.co.uk/valuablecontentmarketingexplained" target="_blank" rel="noopener noreferrer">Valuable Content</a>, promote a <strong>Help don&#8217;t sell, Talk don&#8217;t yell, Show don&#8217;t tell</strong> ethos that seems to be an excellent approach. They extol the virtues of <em>encouraging</em> users to make purchases rather than making them. Guiding consumers to making their own decision rather than telling them what they want, it seems, makes users more receptive and more likely to be long-term customers.</p>
<p>I’ve read too many articles on numbers in titles, using questions, how three exclamation points garner more clicks than any other punctuation. In short, articles explaining how to generate clickbait (there are even <a href="https://www.impactbnd.com/blog-title-generator/blogabout">tools</a> for <a href="http://seopressor.com/blog-title-generator/">automating your clickbait</a>!!!). The issue with most of these articles is that, when I actually read them, they’re usually a bit crap! Often out-of-date, frequently poorly-written, generally weak content. A next natural step for Google, I&#8217;m sure, is weeding out clickbait.</p>
<p>In short; keep your content relevant to your business, updated regularly, and interesting to the user and you&#8217;ll place correctly in the rankings. If you want to rank better, you should be better at what you do &#8211; not how you manipulate the results.</p>
<h4>Edit</h4>
<p><strong>Link to Valuable Content&#8217;s article updated to new link.</strong></p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>&#8220;Stop Being a Douchebag&#8221;: Ego and the development crew</title>
      <link href="https://thomasrigby.com/articles/stop-being-a-douchebag-ego-and-the-development-crew/"/>
      <id>https://thomasrigby.com/articles/stop-being-a-douchebag-ego-and-the-development-crew/</id>
      <published>2017-07-06T10:57:52Z</published>
      <updated>2017-07-06T10:57:52Z</updated>
      <summary type="html">
        &lt;p&gt;At the end of my third year of high school, the lockers were cleared out and any unclaimed stuff was up for grabs. I inherited a copy of Use Your Illusion II on vinyl &amp;#8211; only one of the two LPs (I still have it today) and I bloody loved it. I was 13 years &lt;/p&gt; 
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/0dePWZubdg-300.jpeg" alt="&#8220;Stop Being a Douchebag&#8221;: Ego and the development crew" />
          
          <div class="intro"><p>At the end of my third year of high school, the lockers were cleared out and any unclaimed stuff was up for grabs. I inherited a copy of Use Your Illusion II on vinyl &#8211; only one of the two LPs (I still have it today) and I bloody loved it. I was 13 years old and the edgy bluesy riffs with rude lyrics full of swearing really appealed to me.</p></div>
<p>I loved listening to <em>Get in the Ring</em> where Axl Rose slams everyone he doesn&#8217;t like in five and half minutes of screaming cathartic vitriol. I thought Axl Rose was the new Johnny Rotten and teenage me thought he was the bollocks.</p>
<h2>Then&#8230; the hiatus.</h2>
<p>Axl had driven the other band members away with his perfectionism, his oil-tanker-sized ego, his self-aggrandising dick-swinging. Guns &#8216;n&#8217; Roses disappeared leaving only soiled memories and rumours of <em>Chinese Democracy</em> &#8211; an album that took 14 years to release and, at 13 million dollars, the most expensive rock album of all time! Much anticipated, when it eventually appeared it was, well&#8230; it was shit. The architectural folly of a man to whom no-one had ever said &#8220;no&#8221;.</p>
<h2>My <em>Get in the Ring</em></h2>
<p>I used to work with a developer as part of a small team (there were two or three devs, a project manager, a designer/uxer, and our manager). Previously, he&#8217;d been the sole developer and was clearly finding it hard to play well with others.</p>
<p>As lead developer, he was well within his rights to impose coding standards but he pushed his one-man-band ethos on every area &#8211; he knew <em>everything</em> about project management, business analysis, user experience; and woe-betide anyone who disagreed with him.</p>
<p><img src="https://thomasrigby.com/images/scrummable_walk-off-stage.gif" style="aspect-ratio: 320/180" /></p>
<p>The main issue was that he didn&#8217;t communicate; simply acted petulant when he didn&#8217;t get his own way. He seemed to think that everyone else was useless and he could do their job better than they could.</p>
<p>This would have huge knock-on effects on everyone else; he&#8217;d build things on assumptions because he knew better than anyone who gathered requirements, he&#8217;d change design if he thought he could do it better, he didn&#8217;t need code-review because his code was golden, he didn&#8217;t even commit to repos because he was too used to no-one ever touching his code.</p>
<h2>There&#8217;s no <em>ego</em> in <em>development</em></h2>
<p>He was isolationist in his approach. It could take hours to do simple tasks in his codebase because it was only &#8220;documented&#8221; in his head &#8211; and, hell, if you couldn&#8217;t figure it out without explanation, weren&#8217;t you the idiot! His code is so obviously self-explanatory(!) He understands it, why can&#8217;t you?!</p>
<h2>Toys out of the pram</h2>
<p>The sad truth is that we all have Axl Rose moments. I&#8217;m guilty of it and I&#8217;m sure you are too.</p>
<p>There are occasionally those times where we&#8217;ve been a little big-headed about our process and, especially, code. I notice it mostly when demoing things I&#8217;ve built and I get critique.</p>
<blockquote>
<p>
  <em>&#8220;This took ages <strong>and</strong> it&#8217;s awesome, why aren&#8217;t you happy?!&#8221;</em></p>
<p>  <cite>Me, yesterday</cite>
</p>
</blockquote>
<h2>How to be less Axl</h2>
<p>Communication is key to everything. Some things I have taken away from my experiences include how I comment my code. I like to explain <em>why</em> a piece of code exists, rather than explain <em>what</em> it does. Well-written code should be self-explanatory in its functionality but the rationale behind using a specific method is usually abstracted away &#8211; either in a long-closed ticket or in a developer&#8217;s head. Explaining the rationale in the codebase saves anyone else working on that code, potentially, hours of digging.</p>
<p>For every problem, there are a million solutions &#8211; especially in code. Your solution is just one of them. Always be able to explain your solution to anyone that is interested. Other developers are not stupid for not understanding your code; it could just as easily be the other way round!</p>
<p>Another thing I&#8217;ve learned is that your colleagues are doing their jobs for a reason.</p>
<p>Here&#8217;s an all-too-common scenario at work for me; An account handler comes over to my desk and asks if I could <em><a href="https://ux.shopify.com/reasons-to-stop-saying-just-54118870b998">just</a> do this one tiny amend</em>.</p>
<p>It seems like the easiest thing in the world to just pick it up but then that little task turns out to be bigger than you (or the account handler) thought &#8211; maybe you need to upgrade a library that has a knock-on effect on something else that now needs fixing and, before you know it, you&#8217;ve been working on it for five hours, it&#8217;s still not fixed and your project manager is breathing down your neck because you&#8217;ve not picked up the work you were allocated. You drop the &#8220;tiny amend&#8221; but now the account handler is breathing down your neck because you&#8217;ve not done what <em>they</em> want you to do!</p>
<p><img src="https://thomasrigby.com/images/scrummable_BossBreathingDownYourNeck.png" style="aspect-ratio: 364/249" /></p>
<p>Your project manager allocates work because they&#8217;re entrusted with making sure that jobs go to the most appropriate person to deal with them. Sure, you may have been the last person to touch the bit that needs amending, sure you may be the lead developer, but that doesn&#8217;t mean you&#8217;re the best person to deal with it right now. Heck, it might not even need dealing with right now &#8211; that&#8217;s not your call, the <em>&#8220;when&#8221;</em> is the PM&#8217;s call!</p>
<p>Part of the role of the product layer (PM&#8217;s, business analysts, tech leads, etc) is to shield developers from the crap from clients. If you&#8217;re the dev that is getting emails from clients and dealing with them yourself, you&#8217;re going to get mightily angry and resentful pretty quickly (trust me, I&#8217;ve seen it!).</p>
<h2>Teamwork Teamwork Teamwork</h2>
<p>As part of a development cell, you are a cog in a machine, not the be-all-and-end-all. If you want to do that, be a solo artist, don&#8217;t <a href="https://www.youtube.com/watch?v=qryAwfpHG8o">form a band</a>. Teams run more smoothly when everyone is pulling in the same direction and aligned to the same goals.</p>
<p>If you work in a team, don&#8217;t be Axl Rose.</p>
<blockquote>
<p>
  [He] will never have the insight to examine the part he plays in his own downfall.<br />
  ~ <a href="http://www.radiocremebrulee.com/uncategorized/axl-rose-a-victim-of-ego">Mike Brown, Radio Creme Brulee</a>
</p>
</blockquote>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>McDonald&#8217;s Sauce Dispenser is the greatest product ever</title>
      <link href="https://thomasrigby.com/articles/mcdonalds-sauce-dispenser-is-the-greatest-product-ever/"/>
      <id>https://thomasrigby.com/articles/mcdonalds-sauce-dispenser-is-the-greatest-product-ever/</id>
      <published>2017-07-27T21:16:00Z</published>
      <updated>2017-07-27T21:16:00Z</updated>
      <summary type="html">
        &lt;p&gt;OK, that&amp;#8217;s a bold statement! I guess I should elaborate. Like a lot of teenagers, I worked in a Maccies one summer and I was struck by how awesome the sauce dispenser was. Basically, it&amp;#8217;s a funnel attached to a handle with a trigger. Pulling the trigger releases 5 dots of ketchup in a quincunx &lt;/p&gt; 
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/Db5LR2OFpu-200.jpeg" alt="McDonald&#8217;s Sauce Dispenser is the greatest product ever" />
          
          <div class="intro"><p>OK, that&#8217;s a bold statement! I guess I should elaborate. Like a lot of teenagers, I worked in a Maccies one summer and I was struck by how awesome the sauce dispenser was.</p></div>
<p>Basically, it&#8217;s a funnel attached to a handle with a trigger. Pulling the trigger releases 5 dots of ketchup in a <a href="https://en.wikipedia.org/wiki/Quincunx">quincunx</a> onto the bun. I used this device almost every day and, now that I work in software development, I have decided it&#8217;s the greatest product ever.</p>
<p></p><div id="attachment_773" style="width: 490px" class="wp-caption alignnone"><img src="https://thomasrigby.com/images/scrummable_mcdonalds-sauce-gun.jpg" style="aspect-ratio: 480/320" /><p id="caption-attachment-773" class="wp-caption-text">The greatest product ever!</p></div><p></p>
<p>The amount of effort and money that has gone into developing this device is surely astounding. <a href="https://www.nytimes.com/2016/04/28/opinion/at-mcdonalds-fat-profits-but-lean-wages.html">McDonald&#8217;s are a decidedly profit-driven enterprise</a>. The sauce gun dispenses <em>exactly</em> the right amount of condiment &#8211; enough to finely coat the meat when the bread is put on top but not cost the company unnecessary overheads.</p>
<p>What makes this relevant to software development is that the sauce dispenser does what every good product should do &#8211; <strong>one thing&hellip;and one thing really well</strong>.</p>
<h2>Everything to everyone</h2>
<p>The best products don&#8217;t try to be everything to everyone &#8211; the ones that do always seem to come across as novelty items. To use an example from the real world, I&#8217;m not convinced that a <a href="https://www.clifford-james.co.uk/buy.cfm/kitchen-gadgets/cooks-professional-coffee-n-toast-maker/68/yes/151191">coffee maker and toaster in one</a> would make coffee and toast better that a coffee-machine <em>and</em> a toaster as separate appliances.</p>
<p></p><div id="attachment_845" style="width: 810px" class="wp-caption alignnone"><img src="https://thomasrigby.com/images/scrummable_LMF-SPORKS-MULTI-5-800x746.jpg" style="aspect-ratio: 800/746" /><p id="caption-attachment-845" class="wp-caption-text">Yes, that&#8217;s a knispork!</p></div><p></p>
<p>Similarly, the best apps only do one thing and they do it really well. 500px for photo sharing, DropBox for storing files in the cloud, Google Keep for taking notes. I love Keep. Sure there&#8217;s Evernote and Quip and [insert any other &#8220;note-taking&#8221; app here], but Keep is so ridiculously simple it&#8217;s a dream to use.</p>
<p>Too many products suffer from &#8220;feature bloat&#8221; where stakeholders keep adding new shiny features into a product. Of course, additional functionality isn&#8217;t necessarily a bad thing but these things usually come at a cost. How many times have you had to sideline tech debt to implement a new feature? How often do you see &#8220;delighters&#8221; put into an app instead of fixing a glaring bug?</p>
<p>It is the equivalent of the pub that puts a pool table in but never cleans the floor &#8211; and we&#8217;ve all been there!</p>
<p><img src="https://thomasrigby.com/images/scrummable_pool-table.jpg" style="aspect-ratio: 533/400" /></p>
<h2>Alienating your core audience</h2>
<p>One reason additional features can be the worst thing for your product is alienating your core audience.</p>
<p>Earlier this year, <a href="https://techcrunch.com/2017/01/09/atlassian-acquires-trello/">Atlassian bought Trello</a>, reportedly to serve a chunk of their core demographic that was turning away from Jira.</p>
<p>Jira started life as a bug-tracker. A simple piece of software for tracking tickets, now it&#8217;s one of the most <a href="http://www.creativebloq.com/software/best-project-management-71515632">popular project management tools</a> in the world used by big names such as Twitter, Skype, and NASA as well as <a href="https://discovery.hgdata.com/product/atlassian-jira">over 50,000 more</a>.</p>
<p>In <em>The Innovator’s Dilemma</em>, Clayton Christensen explains that companies are in danger of racing ahead for greater, more lucrative markets, and leave a void behind them to be exploited. This is what happened to Jira; a plucky young upstart rode their coat-tails picking up disgruntled users like gulls following a fishing trawler.</p>
<blockquote>
<p>
  [Trello offers] a fun new way for teams to organize the often messy range of information that feeds into great teamwork<br />
  <cite><a href="https://www.atlassian.com/blog/announcements/atlassian-plus-trello">Mike Cannon-Brookes, Atlassian CEO</a></cite>
</p>
</blockquote>
<p>Basically, as Atlassian&#8217;s flagship product got more complex, those users who initially started using it for its simplicity began to jump ship.</p>
<h2>This time next year, Rodney&hellip;</h2>
<p>Of course, not all products that succeed remain doing their initial function. Amazon began life just selling textbooks to students, Google was only a search engine before they moved into conquering every facet of the internet.</p>
<p>But imagine the chaos of Jeff Bezos&#8217; garage if Amazon had started by selling the range of products they do today.</p>
<p>Where Amazon succeeded here was with their mission statement:</p>
<blockquote>
<p>
  Our vision is to be earth&#8217;s most customer-centric company; to build a place where people can come to find and discover anything they might want to buy online.<br />
  <cite>Amazon&#8217;s Mission Statement</cite>
</p>
</blockquote>
<p>The promise to do one thing perfectly and not alienate users is right there in the statement.</p>
<p>By ensuring that every potential feature <em>must</em> align with the mission statement, we are in a stronger position to push back on <strong>every single</strong> feature under consideration.</p>
<p>By justifying features, we can make sure they are added for the right reasons and we can reduce feature bloat in our products.</p>
<p>When David Hasselhoff&#8217;s Michael Knight first sees KITT&#8217;s dashboard in <em>Knight Rider</em> he remarks that it reminds him of Darth Vader&#8217;s bathroom. Faced with so many buttons and levers and switches, it becomes difficult to drive a car &#8211; the fundamental use-case. Admittedly, KITT was self-driving but, I promise, my point still stands!</p>
<p>And so, we&#8217;re back to sauce dispensers.</p>
<p>If the ketchup dispenser also deposited pickles and mustard, we&#8217;d have a burger quicker but that many moving parts would render it a nightmare to maintain. You wouldn&#8217;t be able to put pickles on anything if the ketchup ran out. Cleaning it every night would be horrendous!</p>
<p>So the humble sauce dispenser dispenses sauce. Perfectly.</p>
<blockquote>
<p>
  McDonald&#8217;s brand mission is to be our customers&#8217; favorite place and way to eat and drink&hellip; We are committed to continuously improving our operations and enhancing our customers&#8217; experience.<br />
  <cite>McDonald&#8217;s Mission Statement</cite>
</p>
</blockquote>
<p>Again, the promise to do one thing perfectly while not alienating users is right there in the statement.</p>
<ul>
<li>Do one thing perfectly</li>
<li>Don&#8217;t alienate users</li>
<li>Repeat ad infinitum</li>
</ul>
<p>Does a special device that provides a regimented amount of ketchup align with the corporate mission statement? Of <em>sauce</em> it does!</p>
<p><img src="https://thomasrigby.com/images/scrummable_giphy.gif" style="aspect-ratio: 500/375" /></p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>The Applesphere is the actual worst for experience designers</title>
      <link href="https://thomasrigby.com/articles/applesphere/"/>
      <id>https://thomasrigby.com/articles/applesphere/</id>
      <published>2018-02-22T00:00:00Z</published>
      <updated>2018-02-22T00:00:00Z</updated>
      <summary type="html">
        The &quot;Cinematic Experience&quot; is a myth.
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/X8eligWVy7-300.jpeg" alt="An iPhone, Magic Mouse, iPad, Apple Watch, and a wireless Mac keyboard sit neatly on a desk." />
          
          <h2>What is the Applesphere?</h2>
<p>Most likely coined by <a href="http://fortune.com/2014/07/30/welcome-to-the-applesphere/">Steven Milunovich</a> (who also coined <em>Appleites</em> 😂), <strong>Applesphere</strong> describes the inter-connected ecosystem of <a href="https://www.apple.com/uk/">Apple</a> products.</p>
<p>Apple products interact with other Apple products and rarely with other products making interlinking between Apple and non-Apple devices is deliberately difficult.</p>
<p>Because of this, a user is more likely to own <a href="https://www.cnbc.com/2017/10/09/the-average-american-household-owns-more-than-two-apple-products.html">multiple Apple devices</a>.</p>
<h2>Why is it so bad for designers?</h2>
<p>I'm going to preface what I say here by explaining that I'm talking about web design in this article. Print designers, artworkers - go ahead, use whatever you want. There are distinct advantages to using an enormous high-resolution screen in your line of work.</p>
<p>There are pros and cons of using such a huge screen for web design. It <em>does</em> allow you to use the most screen real estate to make you more productive at work.</p>
<p>The downside to consistently using such a large hi-res screen for web design is that you can go totally device-blind.</p>
<h3>Device blindness</h3>
<figure>
  <img srcset="https://thomasrigby.com/images/hPb4pRDLeF-300.webp 300w, https://thomasrigby.com/images/hPb4pRDLeF-600.webp 600w, https://thomasrigby.com/images/hPb4pRDLeF-900.webp 900w, https://thomasrigby.com/images/hPb4pRDLeF-300.jpeg 300w, https://thomasrigby.com/images/hPb4pRDLeF-600.jpeg 600w, https://thomasrigby.com/images/hPb4pRDLeF-900.jpeg 900w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px,(max-width: 900px) 900px" src="https://thomasrigby.com/images/hPb4pRDLeF-300.jpeg" loading="lazy" decoding="async" alt="A mock-up of a website displayed on various Apple products" width="900" height="626" style="aspect-ratio: 300/208" />
  <figcaption>
    Always Macs. Always. It could be another brand but it never is.
  </figcaption>
</figure>
<p>If you do a quick search on Google for <a href="https://www.google.co.uk/search?q=site+mockup&amp;safe=active&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=0ahUKEwi_oZfUvLjVAhXHIcAKHe8wBYYQ_AUICigB&amp;biw=1154&amp;bih=768">&quot;site mockup&quot;</a>, you'll find hundreds of designs presented on Macs (also iPhones and iPads) and relatively few other brands.</p>
<p>Designers get it into their heads that, because they're staring at a Mac all day every day, everyone else in the world uses Macs.</p>
<p>In reality, <a href="https://android.jlelse.eu/apple-vs-android-a-comparative-study-2017-c5799a0a1683">a small percentage of the world (less than 13% market share) actually do</a>.</p>
<figure>
  <img srcset="https://thomasrigby.com/images/G0-wQGwFI1-300.webp 300w, https://thomasrigby.com/images/G0-wQGwFI1-600.webp 600w, https://thomasrigby.com/images/G0-wQGwFI1-300.jpeg 300w, https://thomasrigby.com/images/G0-wQGwFI1-600.jpeg 600w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px" src="https://thomasrigby.com/images/G0-wQGwFI1-300.jpeg" loading="lazy" decoding="async" alt="iOS vs Android geographic distribution" width="600" height="398" style="aspect-ratio: 300/199" />
  <figcaption>
    iOS is predominantly used in a handful of the largest developed countries.
  </figcaption>
</figure>
<p>Looking at statistics on global market shares of operating systems though shows a completely different picture. Almost half of users are still on Windows 7. OSX crawls in marginally ahead of nerd's favourite Linux and whatever the hell &quot;Other&quot; is made up of!</p>
<img srcset="https://thomasrigby.com/images/MR8arwcftP-300.webp 300w, https://thomasrigby.com/images/MR8arwcftP-300.jpeg 300w" sizes="(max-width: 300px) 300px" src="https://thomasrigby.com/images/MR8arwcftP-300.jpeg" loading="lazy" decoding="async" alt="OSX Actual Market Share" width="300" height="118" style="aspect-ratio: 300/118" />
<p>Things take a turn for the worse when you factor in screen resolutions. <a href="https://statcounter.com/">StatCounter</a> shows, in the graph below, that the most popular screen size (by far) is 1366 × 768px (incidentally, the resolution of the 13&quot; Dell that I'm writing this article on right now).</p>
<img srcset="https://thomasrigby.com/images/21kC8KBODU-300.webp 300w, https://thomasrigby.com/images/21kC8KBODU-600.webp 600w, https://thomasrigby.com/images/21kC8KBODU-900.webp 900w, https://thomasrigby.com/images/21kC8KBODU-1200.webp 1200w, https://thomasrigby.com/images/21kC8KBODU-300.jpeg 300w, https://thomasrigby.com/images/21kC8KBODU-600.jpeg 600w, https://thomasrigby.com/images/21kC8KBODU-900.jpeg 900w, https://thomasrigby.com/images/21kC8KBODU-1200.jpeg 1200w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px,(max-width: 900px) 900px,(max-width: 1200px) 1200px" src="https://thomasrigby.com/images/21kC8KBODU-300.jpeg" loading="lazy" decoding="async" alt="Browser resolution Market Share" width="1200" height="675" style="aspect-ratio: 300/168" />
<p>It's been said, and rightly too, that the only analytics that matter are the ones from the site you're working on but put all of this together and you've got a statistically high probability that the majority of your audience are on 13&quot; non-retina laptops running Windows 7.</p>
<h3>The Big Bang (Release) Theory</h3>
<p>Oh, Apple! Releasing stuff twice a year in a huge mockery of continuous delivery of value!</p>
<p>I still see the following process floating around some digital marketing agencies;</p>
<ul>
<li>design the whole product</li>
<li>build the whole product</li>
<li>test the whole product</li>
<li>deploy the whole product</li>
</ul>
<p>Not only is this, in my opinion, a hang-over from the days they were print-based marketing agencies, it also mirrors Apple's Spring/Autumn release schedule.</p>
<img srcset="https://thomasrigby.com/images/sbm6sSDKM2-300.webp 300w, https://thomasrigby.com/images/sbm6sSDKM2-600.webp 600w, https://thomasrigby.com/images/sbm6sSDKM2-900.webp 900w, https://thomasrigby.com/images/sbm6sSDKM2-1200.webp 1200w, https://thomasrigby.com/images/sbm6sSDKM2-1500.webp 1500w, https://thomasrigby.com/images/sbm6sSDKM2-300.jpeg 300w, https://thomasrigby.com/images/sbm6sSDKM2-600.jpeg 600w, https://thomasrigby.com/images/sbm6sSDKM2-900.jpeg 900w, https://thomasrigby.com/images/sbm6sSDKM2-1200.jpeg 1200w, https://thomasrigby.com/images/sbm6sSDKM2-1500.jpeg 1500w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px,(max-width: 900px) 900px,(max-width: 1200px) 1200px,(max-width: 1500px) 1500px" src="https://thomasrigby.com/images/sbm6sSDKM2-300.jpeg" loading="lazy" decoding="async" alt="The cast of The Big Bang Theory" width="1500" height="937" style="aspect-ratio: 300/187" />
<p>Leaving aside any discussion of <a href="https://www.youtube.com/watch?v=X3-hOigoxHs">adorkable misogyny</a>, while big bang releases are not exclusive to waterfall, they are all-too-often a consequence of it.</p>
<h3>&quot;Anything less than perfect is terrible&quot;</h3>
<blockquote>
<p>&quot;You can't just ask customers what they want and then try to give that to them. By the time you get it built, they'll want something new.&quot;</p>
<p><cite>Steve Jobs, <a href="http://www.inc.com/magazine/19890401/5602.html">Inc. Magazine</a></cite></p>
</blockquote>
<p>I've heard some people talking about their new iPhones and being amazed that it now does things that my Android phone could do two years ago.</p>
<img srcset="https://thomasrigby.com/images/6Iu8FAV38R-300.webp 300w, https://thomasrigby.com/images/6Iu8FAV38R-600.webp 600w, https://thomasrigby.com/images/6Iu8FAV38R-900.webp 900w, https://thomasrigby.com/images/6Iu8FAV38R-1200.webp 1200w, https://thomasrigby.com/images/6Iu8FAV38R-1500.webp 1500w, https://thomasrigby.com/images/6Iu8FAV38R-300.jpeg 300w, https://thomasrigby.com/images/6Iu8FAV38R-600.jpeg 600w, https://thomasrigby.com/images/6Iu8FAV38R-900.jpeg 900w, https://thomasrigby.com/images/6Iu8FAV38R-1200.jpeg 1200w, https://thomasrigby.com/images/6Iu8FAV38R-1500.jpeg 1500w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px,(max-width: 900px) 900px,(max-width: 1200px) 1200px,(max-width: 1500px) 1500px" src="https://thomasrigby.com/images/6Iu8FAV38R-300.jpeg" loading="lazy" decoding="async" alt="The post says iOS 20 features were announced last night but the link is for Android 12 features" width="1500" height="421" style="aspect-ratio: 300/84" />
<p>The Android universe (as far as I know it has no catchy name, sorry!) is a paragon of agile software development - get it out there, let real people use it, fix what they don't like as soon as possible. As alluded to in the quote above, Apple aren't big fans of providing what consumers want. Rather they'll <em>tell</em> the user what they're going to get and market it so people love it.</p>
<h2>Conclusion</h2>
<p>I don't have all of the answers to these issues. I guess start by acknowledging that non-Apple exists, it's probably a bigger audience than you expect, and you should tailor your designs accordingly.</p>
<aside>
  <p><strong>Edit: Friday, 11 June 2021</strong></p>
  Added that banger of a joke about iOS 20 features! 🤣
</aside>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>This is Betty.</title>
      <link href="https://thomasrigby.com/articles/this-is-betty/"/>
      <id>https://thomasrigby.com/articles/this-is-betty/</id>
      <published>2018-04-24T00:00:00Z</published>
      <updated>2018-04-24T00:00:00Z</updated>
      <summary type="html">
        
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/r0tyY0tT19-300.jpeg" alt="An old woman joyfully uses a computer" />
          
          <p>This is Betty.</p>
<p>She likes to shop and bank online.</p>
<p>Betty gets emails telling her to click on a link and give her password.</p>
<p>Betty knows the internet is scary.</p>
<p>She always clicks the link.</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Gutenberg Components - "I only need one"</title>
      <link href="https://thomasrigby.com/articles/gutenberg-components-i-only-need-one/"/>
      <id>https://thomasrigby.com/articles/gutenberg-components-i-only-need-one/</id>
      <published>2019-04-12T00:00:00Z</published>
      <updated>2019-04-12T00:00:00Z</updated>
      <summary type="html">
        Gutenberg comes with an awful lot of default components most of which will never be used in our websites. Here&#39;s how to disable the ones you won&#39;t use.
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/G-LSNkN2Ld-300.jpeg" alt="A jumble of foam numbers" />
          
          <p>Gutenberg comes with an awful lot of default components (see list below) most of which will never be used in our websites.</p>
<p>It's perfectly possible to just leave them there but this has the potential for disaster.</p>
<p>Leaving them visible to the content manager raises two possibilities;</p>
<ol>
<li>It will be difficult for them to find the actual component they want to use</li>
<li>They will try to use a component that we haven't styled which will break the layout on the frontend</li>
</ol>
<p>So, what do we do...?</p>
<h2>Only show the components you will actually use</h2>
<p>Drop this into your <code>functions.php</code> file or, better yet, write a plugin to handle it 😎</p>
<pre class="language-php " style="counter-reset: linenumber 0"><code class="language-php"><span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'allowed_block_types'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'txb_allowed_block_types'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function-definition function">txb_allowed_block_types</span><span class="token punctuation">(</span> <span class="token variable">$allowed_blocks</span><span class="token punctuation">,</span> <span class="token variable">$post</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$allowed_blocks</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
      <span class="token string single-quoted-string">'core/image'</span><span class="token punctuation">,</span> <span class="token comment">// Add the blocks you want here...</span>
      <span class="token string single-quoted-string">'core/paragraph'</span><span class="token punctuation">,</span>
      <span class="token string single-quoted-string">'core/heading'</span><span class="token punctuation">,</span>
      <span class="token string single-quoted-string">'acf/videum'</span> <span class="token comment">// Add your custom blocks here</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token variable">$allowed_blocks</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre>
<h2>Gutenberg Default Components</h2>
<ul>
<li>Paragraph</li>
<li>Heading</li>
<li>Image</li>
<li>List</li>
<li>Quote</li>
<li>Gallery</li>
<li>Audio</li>
<li>Cover</li>
<li>File</li>
<li>Video</li>
<li>Code</li>
<li>Preformatted</li>
<li>Classic Block</li>
<li>Custom HTML</li>
<li>Pullquote</li>
<li>Table</li>
<li>Verse</li>
<li>Columns</li>
<li>Separator</li>
<li>Button</li>
<li>Media &amp; Text</li>
<li>More</li>
<li>Page Break</li>
<li>Spacer</li>
<li>Shortcode</li>
<li>Archives</li>
<li>Categories</li>
<li>Latest Comments</li>
<li>Latest Posts</li>
<li>Embed</li>
<li>Twitter</li>
<li>YouTube</li>
<li>Facebook</li>
<li>Instagram</li>
<li>WordPress</li>
<li>SoundCloud</li>
<li>Spotify</li>
<li>Flickr</li>
<li>Vimeo</li>
<li>Animoto</li>
<li>Cloudup</li>
<li>CollegeHumor</li>
<li>Crowdsignal</li>
<li>Dailymotion</li>
<li>Funny or Die</li>
<li>Hulu</li>
<li>Imgur</li>
<li>Issuu</li>
<li>Kickstarter</li>
<li>Meetup.com</li>
<li>Mixcloud</li>
<li>Photobucket</li>
<li>Reddit</li>
<li>ReverbNation</li>
<li>Screencast</li>
<li>Scribd</li>
<li>Slideshare</li>
<li>SmugMug</li>
<li>Speaker Deck</li>
<li>TED</li>
<li>Tumblr</li>
<li>VideoPress</li>
<li>WordPress.tv</li>
</ul>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>For modern development, Desktop and Mobile are not enough</title>
      <link href="https://thomasrigby.com/articles/for-modern-development-desktop-and-mobile-are-not-enough/"/>
      <id>https://thomasrigby.com/articles/for-modern-development-desktop-and-mobile-are-not-enough/</id>
      <published>2020-10-30T00:00:00Z</published>
      <updated>2020-10-30T00:00:00Z</updated>
      <summary type="html">
        Different devices have different capabilities, using mobile to describe both narrow screens and touch screens is confusing and leads to assumptions that come back to bite us.
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/9pa_n6iGgi-300.jpeg" alt="Pile of smartphones" />
          
          <p><strong>We need to expand our vocabulary.</strong></p>
<p>Different devices have different capabilities, using mobile to describe both narrow screens and touch screens is confusing and leads to assumptions that come back to bite us.</p>
<p>If I dock my browser to half of my screen (which I do a lot) it's the same width as a portrait iPad but it doesn't have the same capability - I have hover states, for example.</p>
<p>Conversely, an iPad Pro is bigger than my laptop but has a touch screen.</p>
<ul>
<li><strong>Narrow screens</strong> require adjusting layout</li>
<li><strong>Touch capability</strong> requires adjusting functionality</li>
</ul>
<p>We don't require any extra designs, we need to think about whether this design works.</p>
<p>And, of course, use our new vocabulary to accurately maintain our products.</p>
<h2>I'll give you an example…</h2>
<p>I'm currently working on a project - the frontend is responsive and the layout stacks according to the screen dimensions. On the homepage there is a carousel of cards where additional copy is displayed on hover.</p>
<video style="width: 100%; height: auto; aspect-ratio: 2444/1604;" width="244" height="160" poster="https://thomasrigby.com/images/show-hide-hover-demo.gif" controls="">
  <source src="https://thomasrigby.com/images/show-hide-hover-demo.webm" type="video/webm" />
  Your browser does not support the video tag.
</video>
<p>I was asked to make the additional copy <q>always visible on mobile</q>.</p>
<p>In this case, &quot;mobile&quot; is not correct. If I was to only target &quot;narrow screens&quot;, the functionality is still broken on large touchscreens because the issue with this hidden copy is &quot;hoverability&quot;, not screen size.</p>
<p>Showing/hiding the copy based on whether the screen is wider or narrower than 768px wouldn't solve the problem!</p>
<p>It's almost always a matter of education. A client is going to notice a bug on her iPhone and relay it as &quot;on mobile&quot;. And that's absolutely fine; it's not her job to be aware of all of the nuance - it's ours.</p>
<p>The trick here is not to assume that <em>her</em> definitition of &quot;mobile&quot; is identical to <em>your</em> definition of &quot;mobile&quot; and plough ahead making changes. Consider what is causing the issue, maybe even ask whether it's caused by a narrow screen, touch or lack thereof.</p>
<p>If you work with a client for any length of time, they'll cotton on and start to use the vocabulary.</p>
<p>Everyone speaking the same language leads to less confusion, less faux pas, less re-fixing the same bug because we assumed wrong.</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Each child in a list should have a unique "key" prop</title>
      <link href="https://thomasrigby.com/articles/warning--each-child-in-a-list-should-have-a-unique--key--prop/"/>
      <id>https://thomasrigby.com/articles/warning--each-child-in-a-list-should-have-a-unique--key--prop/</id>
      <published>2020-11-27T00:00:00Z</published>
      <updated>2020-11-27T00:00:00Z</updated>
      <summary type="html">
        Fix this common React error without dependencies
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/5AB7vdd-ab-300.jpeg" alt="A error message in React console" />
          
          <p>To prevent ugly errors in your console when you loop through an array, React likes you to use a <em>unique key</em> for each child element.</p>
<p>We usually use the loop index. This is not advised for several reasons<sup>1, 2</sup>.</p>
<p>Instead try this…</p>
<p><code>Math.random().toString(36).substr(2, 9)</code></p>
<p>This will give you a (fairly) random 9-character alphanumerical string.</p>
<img srcset="https://thomasrigby.com/images/YOWpZSJitS-300.webp 300w, https://thomasrigby.com/images/YOWpZSJitS-600.webp 600w, https://thomasrigby.com/images/YOWpZSJitS-300.jpeg 300w, https://thomasrigby.com/images/YOWpZSJitS-600.jpeg 600w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px" src="https://thomasrigby.com/images/YOWpZSJitS-300.jpeg" loading="lazy" decoding="async" alt="Example code" width="600" height="180" style="aspect-ratio: 300/90" />
<pre class="language-jsx " style="counter-reset: linenumber 0"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">{</span> items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span> <span class="token punctuation">}</span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
</code></pre>
<p>This is useful for &quot;throwaway&quot; keys. If you're going to be referencing the keys in any way, you need to use a unique property (like an <code>ID</code> or <code>slug</code>).</p>
<hr />
<p><sup>1</sup> <a href="https://reactjs.org/docs/lists-and-keys.html">React Docs say so</a></p>
<p><sup>2</sup> <a href="https://stackoverflow.com/questions/46735483/error-do-not-use-array-index-in-keys">Stack Overflow Bros say so</a></p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Crafting the ideal line-length</title>
      <link href="https://thomasrigby.com/articles/crafting-the-ideal-line-length/"/>
      <id>https://thomasrigby.com/articles/crafting-the-ideal-line-length/</id>
      <published>2020-12-04T00:00:00Z</published>
      <updated>2020-12-04T00:00:00Z</updated>
      <summary type="html">
        How to achieve the ideal line length using css.
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/P-Szuu9LmF-300.jpeg" alt="A subway train waits in Torrent Avinguda Station, Valencia" />
          
          <p>Robert Bringhurst, in <a href="https://www.amazon.com/Elements-Typographic-Style-Robert-Bringhurst/dp/0881792063/ref=sr_1_1?ie=UTF8&amp;qid=1317888735&amp;sr=8-1">The Elements of Typographic Style</a>, puts a comfortable line-length between 45 and 75 characters. Thanks to the <a href="https://caniuse.com/#feat=ch-unit">well-supported css value <code>ch</code></a> we can achieve this much more simply than before.</p>
<p>Declaring the <code>font-size</code> in <code>rem</code> (relative elastic measurements) means that <a href="https://nicolas-hoizey.com/2016/03/people-don-t-change-the-default-16px-font-size-in-their-browser.html">all of the users who change their font size in the browser</a> will have this change reflected in your website. In addition, using <code>rem</code> for other values (such as padding and margins) will adjust these in accordance making for a more fluid and, ultimately, more comfortable experience.</p>
<p>Finally, add to this a generous line-height (leading) to give the user enough negative space to comfortably read the content. These values are declared in <code>em</code> (elastic measurements) which means they will take their base value from the font-size of the element they have been applied to (as opposed to the <code>rem</code> which takes its base value from the font-size on the <code>&lt;html&gt;</code> element). <code>em</code> will help with maintenance in the future as values need only be changed in one place instead of two or three - nobody wants a 32px font on an 18px line-height!</p>
<pre class="language-css " style="counter-reset: linenumber 0"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">max-width</span><span class="token punctuation">:</span> 67ch<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 1.5em<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>With headings, the principles remain the same though the values change. Headings should be larger than regular body copy to provide visual feedback that this is a delineator - marking the start of a new section of content.</p>
<pre class="language-css " style="counter-reset: linenumber 0"><code class="language-css"><span class="token selector">h2</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span>
  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>67ch / 1.25<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 1.5em<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>To ensure all of your typographical elements have a nice comfortable space around them, use <a href="http://twitter.com/@heydonworks">Heydon Pickering</a>'s <a href="https://alistapart.com/article/axiomatic-css-and-lobotomized-owls/">Lobotomised Owl Selector</a>!</p>
<pre class="language-css " style="counter-reset: linenumber 0"><code class="language-css"><span class="token selector">*+*</span> <span class="token punctuation">{</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> 1.5em<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>Conclusion</h2>
<p>For larger blocks of text (think article body copy or legal pages), these settings provide a comfortable experience for the great majority of readers.</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>The semantics of interaction vs navigation</title>
      <link href="https://thomasrigby.com/articles/the-semantics-of-interaction-vs-navigation/"/>
      <id>https://thomasrigby.com/articles/the-semantics-of-interaction-vs-navigation/</id>
      <published>2020-12-07T00:00:00Z</published>
      <updated>2020-12-07T00:00:00Z</updated>
      <summary type="html">
        It is commonplace for designers to style both links and buttons to look like “buttons”. But just because something looks like a button, doesn’t mean it is a &amp;lt;button&amp;gt;.
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/zr0IBK6ycj-300.jpeg" alt="Chain links" />
          
          <p>It is commonplace for designers to style both links and buttons to look like “buttons”. But just because something <em>looks</em> like a button, doesn’t mean it <em>is</em> a <code>&lt;button&gt;</code> .</p>
<p>The general rule is to use <code>&lt;button onClick=&quot;function()&quot;&gt;</code> to control in-page interaction and <code>&lt;a href=&quot;/path/to/link-destination&quot;&gt;</code> to control navigation to a different page<sup>†</sup>.</p>
<p>Examples of where to use a button element include toggling an off-canvas menu or loading more posts. If you are navigating to a different page - use an anchor link.</p>
<p>Never, ever, ever do this:</p>
<pre class="language-html " style="counter-reset: linenumber 0"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
  <span class="token special-attr"><span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'/path/to/new/page.html'</span> <span class="token punctuation">}</span></span><span class="token punctuation">"</span></span></span>
<span class="token punctuation">></span></span>
  Click me
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
</code></pre>
<p>Assistive technologies will announce button and link elements differently and they can be activated in different ways depending on the element - use the wrong one and you run the risk of confusing the user.</p>
<hr />
<p><sup>†</sup> The in-page “anchor” link is an exception to this. Always use an <code>&lt;a href=&quot;#anchor-link&quot;&gt;</code> tag for that even though the user doesn’t leave the page. This is because it will modify the URL and helps the user find the content.</p>
<p>Again, the same effect can be achieved using JavaScript to manipulate the Browser History API but why would you write extra code to recreate something the browser gives you for free?!</p>
<p>Oh, and if you're missing the &quot;smooth scrolling&quot; that you can add with JavaScript, consider the <a href="https://caniuse.com/css-scroll-behavior">fairly well-supported <code>scroll-behavior: scroll;</code> property</a>.</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Alternatives to master</title>
      <link href="https://thomasrigby.com/articles/alternatives-to-master/"/>
      <id>https://thomasrigby.com/articles/alternatives-to-master/</id>
      <published>2020-12-14T00:00:00Z</published>
      <updated>2020-12-14T00:00:00Z</updated>
      <summary type="html">
        In an effort to remove unnecessary references to slavery and replace them with more inclusive terms, many companies are opting to replace the term `master` as their main git branch name.
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/ddYJVP4A5r-300.jpeg" alt="A hand-drawn example of a git flow" />
          
          <p>In an effort to remove unnecessary references to slavery and replace them with more inclusive terms, many companies are opting to replace the term <code>master</code> as their main git branch name.</p>
<p>GitHub <a href="https://github.com/github/renaming">opted for <em>Main</em></a> but here are a few other options to consider.</p>
<h2>First</h2>
<ul>
<li><strong>Base</strong></li>
<li><strong>Main</strong></li>
<li><strong>Primary</strong></li>
<li><strong>Source</strong></li>
</ul>
<h2>Cloning</h2>
<p>The term for the person from whom a clone is, well, cloned in various science fiction novels and shows.</p>
<ul>
<li><strong>Original</strong> (<em><a href="https://www.imdb.com/title/tt2234222/">Orphan Black</a></em>)</li>
<li><strong>Prime</strong> (<em><a href="https://en.wikipedia.org/wiki/Mirror_Dance">Mirror Dance</a></em>)</li>
<li><strong>Template</strong> (<em><a href="https://www.goodreads.com/book/show/2278387.Saturn_s_Children">Saturn's Children</a></em>)</li>
</ul>
<h2>Genealogy</h2>
<ul>
<li><strong>Progenitor</strong>: The <a href="https://en.wikipedia.org/wiki/Progenitor">progenitor</a> is the – sometimes legendary – founder of a family, line of descent, clan or tribe, noble house or an ethnic group.</li>
</ul>
<h2>Nature</h2>
<p>&quot;Cloning&quot; is a horticultural term deriving from the Greek word for <em>twig</em>.</p>
<ul>
<li><strong>Root</strong></li>
<li><strong>Radix</strong> (Latin for &quot;Root&quot;)</li>
<li><strong>Trunk</strong> (Neatly relates to &quot;branches&quot; in development. Also used in <em><a href="https://en.wikipedia.org/wiki/Apache_Subversion">SVN</a></em>)</li>
</ul>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Pre- and Post- NPM Scripts</title>
      <link href="https://thomasrigby.com/articles/pre-post-npm-scripts/"/>
      <id>https://thomasrigby.com/articles/pre-post-npm-scripts/</id>
      <published>2021-01-04T00:00:00Z</published>
      <updated>2021-01-04T00:00:00Z</updated>
      <summary type="html">
        I&#39;m not a fan of chaining together lots of commands and, it turns out, neither are NPM!
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/AYwffKkAUv-300.jpeg" alt="A landscape of a lake between two hills" />
          
          <p>I've been working on a project at work recently that takes data from a CMS, builds into a React app, and bundles into an iOS app using CapacitorJS</p>
<pre class="language-json " style="counter-reset: linenumber 0"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"react-scripts build"</span><span class="token punctuation">,</span>
    <span class="token property">"harvest"</span><span class="token operator">:</span> <span class="token string">"node harvest.js"</span><span class="token punctuation">,</span>
    <span class="token property">"copy"</span><span class="token operator">:</span> <span class="token string">"npx cap copy ios"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>It would be tedious to keep running <code>npm run harvest &amp;&amp; npm run build &amp;&amp; npm run copy</code> every single time.</p>
<p>I guess I could make a special case build script…</p>
<pre class="language-json " style="counter-reset: linenumber 0"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"build:ios"</span><span class="token operator">:</span> <span class="token string">"npm run harvest &amp;&amp; npm run build &amp;&amp; npm run copy"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>I'm not a fan of long chains of commands and, it turns out, neither are NPM.</p>
<h2>Introducing <code>pre</code> and <code>post</code>!</h2>
<pre class="language-json " style="counter-reset: linenumber 0"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"prebuild"</span><span class="token operator">:</span> <span class="token string">"npm run harvest"</span><span class="token punctuation">,</span>
    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"react-scripts build"</span><span class="token punctuation">,</span>
    <span class="token property">"postbuild"</span><span class="token operator">:</span> <span class="token string">"npm run copy"</span><span class="token punctuation">,</span>
    <span class="token property">"harvest"</span><span class="token operator">:</span> <span class="token string">"node harvest.js"</span><span class="token punctuation">,</span>
    <span class="token property">"copy"</span><span class="token operator">:</span> <span class="token string">"npx cap copy ios"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>These suffixes can be added to any NPM script and will run automatically when you run the main script.</p>
<p>Now, whenever I <code>npm run build</code>, I get <code>npm run harvest</code> and <code>npm run copy</code> <strong>for free!</strong></p>
<p>It saves my fingers, it stops me forgetting to copy my build folder to iOS, and it satisfies my compulsion for short, neat lines.</p>
<p>What could you do with this?</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Human-readable Numbers</title>
      <link href="https://thomasrigby.com/articles/human-readable-numbers/"/>
      <id>https://thomasrigby.com/articles/human-readable-numbers/</id>
      <published>2021-01-20T00:00:00Z</published>
      <updated>2021-01-20T00:00:00Z</updated>
      <summary type="html">
        Convert a JavaScript number to a human-readable number the easy way.
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/DBkjkfUOO3-300.jpeg" alt="A jumble of foam numbers" />
          
          <p>I recently came across a situation where I was required to add two numbers before displaying them on the frontend.</p>
<p>Here is a (very) simplistic example…</p>
<pre class="language-javascript " style="counter-reset: linenumber 0"><code class="language-javascript">  <span class="token keyword">const</span> valueA <span class="token operator">=</span> <span class="token number">12300</span>
  <span class="token keyword">const</span> valueB <span class="token operator">=</span> <span class="token number">45.67</span>
  <span class="token keyword">const</span> numberToDisplay <span class="token operator">=</span> valueA <span class="token operator">+</span> valueB <span class="token comment">// 12345.67</span>
</code></pre>
<p>The trouble was, the client didn't like the way the number was displayed - <code>12345.67</code> felt <em>&quot;too computer-y&quot;</em> 😂</p>
<p>I'm old enough to remember having to write a function that counted the number of digits in the string and insert commas (or fullstops) in the relevant places but I thought to myself:</p>
<blockquote>
<p>&quot;Hey, it's 2021! JavaScript is better now! There must be an easier way!&quot;</p>
</blockquote>
<p>So, a little bit of searching later - <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString"><code>Number.prototype.toLocaleString()</code></a>!!! 🎉</p>
<p>This handy method will convert a given <code>Number</code> into a human-readable <code>String</code> based on a given language.</p>
<p>In this handy utility function, we format the given value based on the <code>lang</code> attribute on the <code>&lt;html/&gt;</code> element unless one is explicitly provided.</p>
<pre class="language-javascript " style="counter-reset: linenumber 0"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">humanReadableNumber</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> lang <span class="token operator">=</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> locale <span class="token operator">=</span> lang <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>lang <span class="token operator">||</span> <span class="token string">'en'</span>
  <span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> number<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span>locale<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>So, using our example from before…</p>
<pre class="language-javascript " style="counter-reset: linenumber 0"><code class="language-javascript">  <span class="token keyword">const</span> valueA <span class="token operator">=</span> <span class="token number">12300</span>
  <span class="token keyword">const</span> valueB <span class="token operator">=</span> <span class="token number">45.67</span>
  <span class="token keyword">const</span> numberToDisplay <span class="token operator">=</span> <span class="token function">humanReadableNumber</span><span class="token punctuation">(</span>valueA <span class="token operator">+</span> valueB<span class="token punctuation">)</span> <span class="token comment">// 12,345.67</span>
</code></pre>
<p>If you want to have a play around, I made a CodePen.</p>
<p class="codepen" data-height="265" data-theme-id="dark" data-default-tab="js,result" data-user="hryggrbyr" data-slug-hash="PoGLMdE" data-preview="true" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="Human-readable number">
  <span>See the Pen <a href="https://thomasrigby.com/pen/PoGLMdE">
  Human-readable number</a> by Thomas Rigby (<a href="https://thomasrigby.com/articles/human-readable-numbers/">@hryggrbyr</a>)
  on <a href="https://codepen.io/">CodePen</a>.</span>
</p>
<script async="" src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<p>Hope this is as useful for you as it was for me! 😎</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Using slots in React</title>
      <link href="https://thomasrigby.com/articles/using-slots-in-react/"/>
      <id>https://thomasrigby.com/articles/using-slots-in-react/</id>
      <published>2021-02-02T00:00:00Z</published>
      <updated>2021-02-02T00:00:00Z</updated>
      <summary type="html">
        Having multiple almost identical components is just very bad and wrong - let&#39;s fix it properly!
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/GQqLW25uTK-300.jpeg" alt="Slot machines" />
          
          <p>Consider the humble Modal…</p>
<p>We have a button that opens the modal, and some content to be displayed within.</p>
<p>The traditional way, using React's <code>children</code> property, would look something like this…</p>
<pre class="language-jsx " style="counter-reset: linenumber 0"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">{</span> triggerClasses<span class="token punctuation">,</span> triggerText<span class="token punctuation">,</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> props

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Modal</span></span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>triggerClasses<span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>openModal<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>triggerText<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>closeModal<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Close</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Modal</span></span><span class="token punctuation">></span></span>

<span class="token comment">// Footer.jsx</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Modal</span></span>
  <span class="token attr-name">triggerText</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>References<span class="token punctuation">"</span></span>
  <span class="token attr-name">triggerClasses</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReferencesList</span></span><span class="token punctuation">/></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Modal</span></span><span class="token punctuation">></span></span>
</code></pre>
<p>Here we have a <code>Modal</code> component that expects a list of classes and some button text. Anything within the opening and closing tags is considered <code>children</code> and rendered inside the <code>article</code> element.</p>
<p>This is all very good. Pat yourself on the back, move the ticket to done - well done! 😎</p>
<h2>Some time later…</h2>
<p>Some time later, a new ticket surfaces. Now, <em>in addition</em> to the existing Modal, we also need a component that lets the user open a larger image in a modal.</p>
<p>One option is to create an <code>ImageModal</code> component…</p>
<pre class="language-jsx " style="counter-reset: linenumber 0"><code class="language-jsx"><span class="token comment">// Image-Modal.jsx</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> triggerClasses<span class="token punctuation">,</span> triggerImage<span class="token punctuation">,</span> triggerImageAltText<span class="token punctuation">,</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> props

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Modal</span></span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> 
    <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>triggerClasses<span class="token punctuation">}</span></span>
    <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>triggerImage<span class="token punctuation">}</span></span>
    <span class="token attr-name">alt</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>triggerImageAltText<span class="token punctuation">}</span></span>
    <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>openModal<span class="token punctuation">}</span></span>
  <span class="token punctuation">/></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>closeModal<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Close</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Modal</span></span><span class="token punctuation">></span></span>

<span class="token comment">// Carousel.jsx</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Modal</span></span>
  <span class="token attr-name">triggerClasses</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thumbnail<span class="token punctuation">"</span></span>
  <span class="token attr-name">triggerImage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://placekitten.com/300/300<span class="token punctuation">"</span></span>
  <span class="token attr-name">triggerImageAltText</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A kitten<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>full-size<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://placekitten.com/1920/1080<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A kitten<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Modal</span></span><span class="token punctuation">></span></span>
</code></pre>
<p>But now we have two <em>almost</em> identical components - the only real difference here is the &quot;trigger&quot; element - one is a button, one is an image.</p>
<p>Sidenote: Look at that <code>onClick</code> handler on the <code>img</code> element. Does it look wrong to you? It should.</p>
<p>What do we do if we get a request for something else slightly different? Perhaps the trigger will need to be a button with an icon or a text link. Do we copy pasta <code>TextModal.jsx</code> or <code>ModalWithIcon.jsx</code>?</p>
<p>Having multiple <em>almost</em> identical components is just very bad and wrong - let's fix it properly!</p>
<h2>Fixing it properly</h2>
<p>The fancy thing with the <code>children</code> property is that there's nothing fancy about it at all - it's just a <code>prop</code> like all of the others. It just happens that we stuff that one with <code>&lt;html/&gt;</code> and the others with <code>String</code>s.</p>
<p>You can put <code>&lt;html/&gt;</code> into <strong>any of the <code>props</code></strong>!</p>
<pre class="language-jsx " style="counter-reset: linenumber 0"><code class="language-jsx"><span class="token comment">// New-Modal.jsx</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> trigger<span class="token punctuation">,</span> content <span class="token punctuation">}</span> <span class="token operator">=</span> props

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Modal</span></span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>openModal<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>trigger<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>closeModal<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Close</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Modal</span></span><span class="token punctuation">></span></span>

<span class="token comment">// Footer.jsx</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Modal</span></span>
  <span class="token attr-name">trigger</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">References</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">}</span></span>
  <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReferencesList</span></span><span class="token punctuation">/></span></span><span class="token punctuation">}</span></span>
<span class="token punctuation">/></span></span>

<span class="token comment">// Carousel.jsx</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Modal</span></span>
  <span class="token attr-name">trigger</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">clasName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>thumbnail<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://placekitten.com/300/300<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A kitten<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span></span>
  <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>full-size<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://placekitten.com/1920/1080<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A kitten<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span></span>
<span class="token punctuation">/></span></span>
</code></pre>
<p>Now, semantically all &quot;trigger&quot; elements are actually <code>button</code>s (with all of the benefits of using an actual button) but visually they can be almost anything you want!</p>
<p>We have one component that can handle different variants. It does one job and it does it pretty well!</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Inclusive Design is more important than Accessibility</title>
      <link href="https://thomasrigby.com/articles/accessibility-inclusive-design/"/>
      <id>https://thomasrigby.com/articles/accessibility-inclusive-design/</id>
      <published>2021-02-08T00:00:00Z</published>
      <updated>2021-02-08T00:00:00Z</updated>
      <summary type="html">
        We tend to think of accessibility as being something we add to websites to help the disabled. This is a mindset we need to get out of.
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/fmnfGZPSZu-300.jpeg" alt="Blind man using a braille screen reader" />
          
          <p>We tend to think of accessibility as being something we add to websites to help the disabled. This is a mindset we need to get out of. The principles of accessibility help <em>everyone</em> and, as such, should be a foundation we build our applications on - not something added as an afterthought.</p>
<blockquote>
<p>“Accessibility is not hard, it’s only a pain-in-the-neck if you wait til the very end to do it.”</p>
<p><cite><a href="https://twitter.com/SaraSoueidan">@SaraSoueidan</a></cite></p>
</blockquote>
<img srcset="https://thomasrigby.com/images/GfxTgP2zru-300.webp 300w, https://thomasrigby.com/images/GfxTgP2zru-300.jpeg 300w" sizes="(max-width: 300px) 300px" src="https://thomasrigby.com/images/GfxTgP2zru-300.jpeg" loading="lazy" decoding="async" alt="Drake Hotline Bling meme. Accessibility is tired, Inclusive design is wired." width="300" height="300" style="aspect-ratio: 300/300" />
<h2>Door handles vs Door knobs</h2>
<p>Imagine our users could be in one of four states: permanently disabled, temporarily disabled, contextually disabled, or abled.</p>
<p>For example,</p>
<ul>
<li>I have arthritis (Permanently disabled)</li>
<li>I have a broken wrist and am wearing a cast (Temporarily disabled)</li>
<li>I am carrying several heavy shopping bags (Contextually disabled)</li>
<li>None of the above</li>
</ul>
<figure>
  <img srcset="https://thomasrigby.com/images/-KrEAT5MpW-300.webp 300w, https://thomasrigby.com/images/-KrEAT5MpW-600.webp 600w, https://thomasrigby.com/images/-KrEAT5MpW-900.webp 900w, https://thomasrigby.com/images/-KrEAT5MpW-1200.webp 1200w, https://thomasrigby.com/images/-KrEAT5MpW-1500.webp 1500w, https://thomasrigby.com/images/-KrEAT5MpW-300.jpeg 300w, https://thomasrigby.com/images/-KrEAT5MpW-600.jpeg 600w, https://thomasrigby.com/images/-KrEAT5MpW-900.jpeg 900w, https://thomasrigby.com/images/-KrEAT5MpW-1200.jpeg 1200w, https://thomasrigby.com/images/-KrEAT5MpW-1500.jpeg 1500w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px,(max-width: 900px) 900px,(max-width: 1200px) 1200px,(max-width: 1500px) 1500px" src="https://thomasrigby.com/images/-KrEAT5MpW-300.jpeg" loading="lazy" decoding="async" alt="Door knob" width="1500" height="1004" style="aspect-ratio: 300/200" />
  <figcaption>A door with a door knob</figcaption>
</figure>
<p>I arrive home and this is my front door.</p>
<p>In the first two cases, this door knob is largely impossible to use. Even for a contextually disabled person, it is harder to use - they may have to put their bags down to operate the knob for example.</p>
<figure>
  <img srcset="https://thomasrigby.com/images/mBXlTlFRDU-300.webp 300w, https://thomasrigby.com/images/mBXlTlFRDU-600.webp 600w, https://thomasrigby.com/images/mBXlTlFRDU-900.webp 900w, https://thomasrigby.com/images/mBXlTlFRDU-1200.webp 1200w, https://thomasrigby.com/images/mBXlTlFRDU-1500.webp 1500w, https://thomasrigby.com/images/mBXlTlFRDU-300.jpeg 300w, https://thomasrigby.com/images/mBXlTlFRDU-600.jpeg 600w, https://thomasrigby.com/images/mBXlTlFRDU-900.jpeg 900w, https://thomasrigby.com/images/mBXlTlFRDU-1200.jpeg 1200w, https://thomasrigby.com/images/mBXlTlFRDU-1500.jpeg 1500w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px,(max-width: 900px) 900px,(max-width: 1200px) 1200px,(max-width: 1500px) 1500px" src="https://thomasrigby.com/images/mBXlTlFRDU-300.jpeg" loading="lazy" decoding="async" alt="A door with a handle" width="1500" height="946" style="aspect-ratio: 300/189" />
  <figcaption>A door with a handle</figcaption>
</figure>
<p>Alternatively, a door handle can be operated with an elbow or a hand or a foot or a <a href="https://www.youtube.com/watch?v=vFOh6vg0EMM">cat</a>. It requires less motor control and directly benefits the people in the first three scenarios and, importantly, <strong>does not</strong> inconvenience anyone in the fourth category.</p>
<p>With all other things being equal, why would you not opt for a handle?</p>
<h3>How does this apply to websites?</h3>
<p>Digressing briefly, <a href="https://en.wikipedia.org/wiki/Presbyopia">Presbyopia</a> is a natural ageing of the eyes caused by the hardening of the lens of the eye resulting in a “progressively worsening ability to focus clearly on close objects”. It affects things like being able to read small print, headaches and eyestrain when reading for long periods, and blurred vision. It will happen to us all eventually.</p>
<p>In addition to this, the muscles we use to control our pupil size will weaken as we age which results in becoming less responsive to changes in ambient lighting. The average 60 year old needs <strong>three times</strong> more ambient lighting for comfortable reading than a 20 year old.</p>
<p>Also as we age, the cells in our retinas responsible for normal colour vision decline in sensitivity causing colours to become less bright and the contrast between different colours to be less noticeable.</p>
<p>We are used to thinking that ensuring sufficient contrast of our website’s text and using icons as well as colour for error states is for the <a href="http://www.colourblindawareness.org/colour-blindness/">4.5% of the UK population</a> that are colour-blind, but it really isn’t. It’s for the <a href="https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates/articles/overviewoftheukpopulation/july2017">18% of the UK population</a> that are over 65 and the ever-changing percentage of people in the UK trying to access our content on a fingerprint-y laptop in bright sunshine.</p>
<figure>
  <img srcset="https://thomasrigby.com/images/mFfUJqzgNq-300.webp 300w, https://thomasrigby.com/images/mFfUJqzgNq-600.webp 600w, https://thomasrigby.com/images/mFfUJqzgNq-900.webp 900w, https://thomasrigby.com/images/mFfUJqzgNq-1200.webp 1200w, https://thomasrigby.com/images/mFfUJqzgNq-1500.webp 1500w, https://thomasrigby.com/images/mFfUJqzgNq-300.jpeg 300w, https://thomasrigby.com/images/mFfUJqzgNq-600.jpeg 600w, https://thomasrigby.com/images/mFfUJqzgNq-900.jpeg 900w, https://thomasrigby.com/images/mFfUJqzgNq-1200.jpeg 1200w, https://thomasrigby.com/images/mFfUJqzgNq-1500.jpeg 1500w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px,(max-width: 900px) 900px,(max-width: 1200px) 1200px,(max-width: 1500px) 1500px" src="https://thomasrigby.com/images/mFfUJqzgNq-300.jpeg" loading="lazy" decoding="async" alt="A laptop screen demonstrating the difficulty one might have viewing a website in direct sunlight. The screen is also covered in fingerprint smudges." width="1500" height="1125" style="aspect-ratio: 300/225" />
  <figcaption>
    It’s not even a touchscreen!
  </figcaption>
</figure>
<p>So, using our criteria from before along with this information as an example, we could have;</p>
<ul>
<li>I have been blind since birth (Permanently disabled)</li>
<li>I have recently had cataract surgery and my vision is diminished (Temporarily disabled)</li>
<li>I am in a park on a sunny summer’s day (Contextually disabled)</li>
<li>None of the above</li>
</ul>
<figure>
  <img srcset="https://thomasrigby.com/images/vz1qywFIv9-300.webp 300w, https://thomasrigby.com/images/vz1qywFIv9-600.webp 600w, https://thomasrigby.com/images/vz1qywFIv9-900.webp 900w, https://thomasrigby.com/images/vz1qywFIv9-1200.webp 1200w, https://thomasrigby.com/images/vz1qywFIv9-1500.webp 1500w, https://thomasrigby.com/images/vz1qywFIv9-300.jpeg 300w, https://thomasrigby.com/images/vz1qywFIv9-600.jpeg 600w, https://thomasrigby.com/images/vz1qywFIv9-900.jpeg 900w, https://thomasrigby.com/images/vz1qywFIv9-1200.jpeg 1200w, https://thomasrigby.com/images/vz1qywFIv9-1500.jpeg 1500w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px,(max-width: 900px) 900px,(max-width: 1200px) 1200px,(max-width: 1500px) 1500px" src="https://thomasrigby.com/images/vz1qywFIv9-300.jpeg" loading="lazy" decoding="async" alt="" width="1500" height="270" style="aspect-ratio: 300/54" />
  <figcaption>
    An example of bad web design
  </figcaption>
</figure>
<p>In this example, we see a few red flags.</p>
<p>Though it may be perfectly readable for some, the pale light-weight font on a white background renders it unreadable for others.</p>
<p>The size of the smaller text beneath the title is also likely to cause issues - don’t forget that we’re also talking about decreasing degrees of visual acuity from age 20 and up in people with no other visual disabilities.</p>
<p>Even on the assumption that this has been built using semantic HTML and has all of the requisite code to make it accessible to screen-readers, we’re still only helping those people <em>actually using screen-readers</em>. Someone who, for example, has been blind from birth may well be using a screen-reader but it is highly unlikely our person recovering from cataract surgery or our able-bodied person in a park will be.</p>
<figure>
  <img srcset="https://thomasrigby.com/images/g3fC-81x2z-300.webp 300w, https://thomasrigby.com/images/g3fC-81x2z-600.webp 600w, https://thomasrigby.com/images/g3fC-81x2z-900.webp 900w, https://thomasrigby.com/images/g3fC-81x2z-1200.webp 1200w, https://thomasrigby.com/images/g3fC-81x2z-1500.webp 1500w, https://thomasrigby.com/images/g3fC-81x2z-300.jpeg 300w, https://thomasrigby.com/images/g3fC-81x2z-600.jpeg 600w, https://thomasrigby.com/images/g3fC-81x2z-900.jpeg 900w, https://thomasrigby.com/images/g3fC-81x2z-1200.jpeg 1200w, https://thomasrigby.com/images/g3fC-81x2z-1500.jpeg 1500w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px,(max-width: 900px) 900px,(max-width: 1200px) 1200px,(max-width: 1500px) 1500px" src="https://thomasrigby.com/images/g3fC-81x2z-300.jpeg" loading="lazy" decoding="async" alt="" width="1500" height="350" style="aspect-ratio: 300/70" />
  <figcaption>An example of more inclusive web design</figcaption>
</figure>
<p>Increasing the font size of the body copy and using a darker shade of grey that adheres to the <a href="https://webaim.org/resources/contrastchecker/">WCAG Guidelines for contrast</a> helps everyone and hinders no-one.</p>
<p>To take this further;</p>
<ul>
<li>I have Parkinson’s Disease (Permanently disabled)</li>
<li>I have a migraine (Temporarily disabled)</li>
<li>I am on a busy tram (Contextually disabled)</li>
<li>None of the above</li>
</ul>
<figure>
  <img srcset="https://thomasrigby.com/images/ViBS7vnOEL-300.webp 300w, https://thomasrigby.com/images/ViBS7vnOEL-600.webp 600w, https://thomasrigby.com/images/ViBS7vnOEL-900.webp 900w, https://thomasrigby.com/images/ViBS7vnOEL-1200.webp 1200w, https://thomasrigby.com/images/ViBS7vnOEL-1500.webp 1500w, https://thomasrigby.com/images/ViBS7vnOEL-300.jpeg 300w, https://thomasrigby.com/images/ViBS7vnOEL-600.jpeg 600w, https://thomasrigby.com/images/ViBS7vnOEL-900.jpeg 900w, https://thomasrigby.com/images/ViBS7vnOEL-1200.jpeg 1200w, https://thomasrigby.com/images/ViBS7vnOEL-1500.jpeg 1500w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px,(max-width: 900px) 900px,(max-width: 1200px) 1200px,(max-width: 1500px) 1500px" src="https://thomasrigby.com/images/ViBS7vnOEL-300.jpeg" loading="lazy" decoding="async" alt="" width="1500" height="252" style="aspect-ratio: 300/50" />
  <figcaption>An example of poor buttons</figcaption>
</figure>
<p>Here is another example of something we could see on a typical website. For anyone in our three “disabled” groups, the small hit areas in these buttons could result in disaster!</p>
<figure>
  <img srcset="https://thomasrigby.com/images/5v0nxE0oe3-300.webp 300w, https://thomasrigby.com/images/5v0nxE0oe3-600.webp 600w, https://thomasrigby.com/images/5v0nxE0oe3-900.webp 900w, https://thomasrigby.com/images/5v0nxE0oe3-1200.webp 1200w, https://thomasrigby.com/images/5v0nxE0oe3-1500.webp 1500w, https://thomasrigby.com/images/5v0nxE0oe3-300.jpeg 300w, https://thomasrigby.com/images/5v0nxE0oe3-600.jpeg 600w, https://thomasrigby.com/images/5v0nxE0oe3-900.jpeg 900w, https://thomasrigby.com/images/5v0nxE0oe3-1200.jpeg 1200w, https://thomasrigby.com/images/5v0nxE0oe3-1500.jpeg 1500w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px,(max-width: 900px) 900px,(max-width: 1200px) 1200px,(max-width: 1500px) 1500px" src="https://thomasrigby.com/images/5v0nxE0oe3-300.jpeg" loading="lazy" decoding="async" alt="" width="1500" height="340" style="aspect-ratio: 300/68" />
  <figcaption>An example of more inclusive buttons</figcaption>
</figure>
<p>By making the buttons larger and further apart, we are helping people with motor-control issues, people operating the site through teary eyes while sneezing, people being elbowed mercilessly by fellow commuters, <em>and</em> our able-bodied user. In this regard, at least, size <em>is</em> everything! 😏</p>
<p>If you are looking for numbers, the <a href="http://web.mit.edu/">Massachusetts Institute of Technology (MIT)</a> conducted a study into the Mechanics of Tactile Sense concluding the average human thumb is the equivalent of 45px to 78px. So make your hit areas at least that big! 😄</p>
<p>By not considering external factors, such as situational usage of our website, we can inadvertently create a terrible experience for everyone.</p>
<h2>Other kinds of contextual disability</h2>
<p>As Chris LaCroix explains in <a href="https://www.captechconsulting.com/blogs/panic-room-usability-testing-in-stressful-situations">Panic Room!</a>, the real world is vastly different to a sterile testing environment - full of noises and distractions that can make using a poorly designed application impossible for anyone.</p>
<p>Imagine you are at the train station and your train has been cancelled (thanks, <a href="http://northernfailapp.co.uk/">Northern Rail</a>!). You have to find the next train to your destination on the app as quickly as possible.</p>
<p>Are you happy about the loading spinner? Are you squinting to read the small text? Is even the large text hard to read in the sunshine? Are you constantly distracted by Tannoy announcements or other passengers jostling on the platform? Are those delightful animated page transitions helping you find the next train?</p>
<p>CNN have a “<a href="https://lite.cnn.io/en">lite version</a>” of their main website. It was released to help people with crappy internet connections get access to breaking news - such as the people who, at the time, were about to be hit by Hurricane Irma.</p>
<p>Now, I’m not saying we need to implement a “text-only” version of every website we make but we can learn from it.</p>
<h3>Why should we bother with any of this?</h3>
<p>A part of our development process includes “cross-browser testing” to ensure there is a working experience for users on Chrome, Firefox, Edge, etc. Earlier I mentioned that 4.5% of the UK’s population is colour-blind. According to <a href="http://gs.statcounter.com/browser-market-share/desktop/united-kingdom/#yearly-2018-2019-bar">StatCounter</a>, that is half as many people as use either Microsoft Edge or Safari. At 18%, over 65s in the United Kingdom count for more people than any browser users other than Google Chrome.</p>
<figure>
  <img srcset="https://thomasrigby.com/images/HBkbgt8SVS-300.webp 300w, https://thomasrigby.com/images/HBkbgt8SVS-600.webp 600w, https://thomasrigby.com/images/HBkbgt8SVS-900.webp 900w, https://thomasrigby.com/images/HBkbgt8SVS-1200.webp 1200w, https://thomasrigby.com/images/HBkbgt8SVS-300.jpeg 300w, https://thomasrigby.com/images/HBkbgt8SVS-600.jpeg 600w, https://thomasrigby.com/images/HBkbgt8SVS-900.jpeg 900w, https://thomasrigby.com/images/HBkbgt8SVS-1200.jpeg 1200w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px,(max-width: 900px) 900px,(max-width: 1200px) 1200px" src="https://thomasrigby.com/images/HBkbgt8SVS-300.jpeg" loading="lazy" decoding="async" alt="" width="1200" height="675" style="aspect-ratio: 300/168" />
  <figcaption>StatCounter Global Stats - Browser Market Share Great Britain 2018-2019</figcaption>
</figure>
<p>The conclusion seems simple; if you’re going to ensure the experience is suitable for Safari users, why are you not ensuring the experience is suitable for people with diminished vision?</p>
<h3>Eyes and ears and mouth and nose: It’s not just visual design</h3>
<p>I’ve spent a bit of time talking about visual impairment in this article, but the same principles hold true for impairments to the other senses.</p>
<p>For example, thinking of hearing impairment, similar situations arise. There are various reasons for watching video content with the volume down;</p>
<ul>
<li>deaf from birth (Permanently disabled)</li>
<li>a bout of tinnitus (Temporarily disabled)</li>
<li>a sleeping baby in a nearby room, partner asleep in the same bed, on a train with no headphones (Contextually disabled).</li>
</ul>
<p>Irrespective of “demographic data” or the “prevalence of deafness in the target market”, doesn’t it make sense to provide quality subtitles with every piece of video content?</p>
<h2>It’s not all sunshine and rainbows</h2>
<p>Inclusive design and making a website accessible to anyone is a difficult thing to do. There are certainly situations where using a pattern to assist a specific group <em>could</em> negatively impact a different group and it may take time and a trial-and-error approach to find a half-way-house solution that caters for as many people as possible.</p>
<p>Similarly, given deadlines and budgets, taking the time to solve all of these problems adequately may be out of the question.</p>
<p>However, starting with some solid principles as a base, and validating any deviations with actual users, can get us closer to Accessibility Nirvana™️ quickly and cost-effectively.</p>
<h2>Conclusion</h2>
<p>Not to be too down on designers but no-one goes to a website to marvel at the design - they come to absorb the content. That content <strong>needs</strong> to be accessible.</p>
<p>If we are saying “this website can be used by <em><strong>anyone</strong></em>” then we need to determine if there are any barriers to the content.</p>
<ul>
<li><strong>Can I find the content?</strong>
<ul>
<li>Search engine optimisation</li>
<li>Information hierarchy
<ul>
<li>Categorisation of content leading to clear and intuitive navigation</li>
<li>Clear structure of page/post copy</li>
</ul>
</li>
<li>Semantic markup</li>
<li>Schema data</li>
<li><a href="https://www.dummies.com/web-design-development/search-engine-optimization/name-your-web-site-files-for-better-seo-results/">Human-readable filenames</a> can also help with SEO</li>
</ul>
</li>
<li><strong>Can I use the website?</strong>
<ul>
<li>Performance</li>
<li>Alt text on images</li>
<li>Videos have subtitles and/or transcripts</li>
<li>Videos can be played/paused/muted/volume-controlled/full-screen</li>
<li>Audio tracks have subtitles and/or transcripts</li>
<li>Reduced cognitive load</li>
<li>The option of customising the colour scheme (Light/Dark mode) to make the site easier to use. The <a href="https://secure.manchester.gov.uk/accessibility/settings">Manchester City Council accessibility</a> settings are probably a little too extreme for the average website but well worth a look.</li>
<li>Affordance of interaction - do buttons do what I expect them to do?</li>
</ul>
</li>
<li><strong>Is the content readable?</strong>
<ul>
<li>Comfortable font size</li>
<li>Comfortable line length</li>
<li>Adequate reading level</li>
<li>Comfortable contrast</li>
<li>Comfortable negative space</li>
</ul>
</li>
</ul>
<p>There is no magic bullet or “one size fits all” solution to the problem of allowing your website to be accessible to anyone - this whole area is hard and riddled with contradictions but if we consider these points for all of our websites, we will build better websites that people can find and use and benefit from.</p>
<p>“Accessibility”, as we are used to thinking about it - making sure we have alt text on images for users of screen-readers, is only a part of the solution. The rest is not the job of A11y but the job of <em>Inclusive Design</em>.</p>
<h2>Further reading</h2>
<p>There’s a <strong>lot</strong> of <a href="https://www.c-sharpcorner.com/article/how-much-data-is-on-the-internet/">stuff on the internet</a> and a lot of stuff about <a href="https://www.bing.com/search?q=a11y+best+practice&amp;qs=n&amp;form=QBRE&amp;sp=-1&amp;pq=a11y+bes&amp;sc=0-8&amp;sk=&amp;cvid=54E033F9EE6C4F37979BA42239CB25DF">“A11y Best Practice” (~40 million results)</a>. I have cut through the noise for you and curated a few articles for further reading.</p>
<ul>
<li><a href="https://blog.marvelapp.com/body-text-small/"><strong>Marvel</strong>: Your Body Text Is Too Small</a></li>
<li><a href="https://medium.com/envoy-design/how-to-design-an-accessible-color-scheme-4a13ca12c92b"><strong>Envoy Design</strong>: How to design an accessible color scheme</a></li>
<li><a href="https://webaim.org/resources/designers/"><strong>WebAIM</strong>: Web Accessibility for Designers</a></li>
<li><a href="https://a11yproject.com/"><strong>The A11y Project</strong>: Basically anything on the site…</a></li>
<li><a href="https://www.smashingmagazine.com/2018/12/voiceover-screen-reader-web-apps/"><strong>Chris Ashton</strong>: I Used The Web For A Day Using A Screen Reader</a></li>
<li><a href="https://accessibility.blog.gov.uk/"><strong>UK Government</strong>: Accessibility blog</a></li>
<li><a href="https://design-system.service.gov.uk/"><strong>UK Government</strong>: Design system</a></li>
<li><a href="https://github.com/bbc/bbc-a11y"><strong>BBC</strong>: BBC Accessibility Standards Checker</a></li>
<li><a href="https://www.wikihow.com/Write-Successfully-for-the-Web"><strong>WikiHow</strong>: How to Write Successfully for the Web</a></li>
<li><a href="https://www.lifewire.com/why-use-semantic-html-3468271"><strong>Lifewire</strong>: Why Use Semantic HTML?</a></li>
<li><a href="http://www.heydonworks.com/"><strong>Heydon Pickering</strong>: Anything by Heydon Pickering</a></li>
<li><a href="https://www.smashingmagazine.com/2014/09/balancing-line-length-font-size-responsive-web-design/"><strong>Laura Franz</strong>: Size Matters: Balancing Line Length And Font Size In Responsive Web Design</a></li>
</ul>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Numberize a value</title>
      <link href="https://thomasrigby.com/articles/numberize-a-value/"/>
      <id>https://thomasrigby.com/articles/numberize-a-value/</id>
      <published>2021-03-04T00:00:00Z</published>
      <updated>2021-03-04T00:00:00Z</updated>
      <summary type="html">
        If you get a CSS value but you want to do maths with it, what do you do? Let&#39;s find out!
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/ZxGa4eC6_B-300.jpeg" alt="A series of digits" />
          
          <p>If you get a CSS value but you want to do maths with it, what do you do?</p>
<pre class="language-js " style="counter-reset: linenumber 0"><code class="language-js"><span class="token keyword">const</span> width <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 960px</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token punctuation">(</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre>
<p>Oh noes! 😖</p>
<p>I guess we could use the CSS <code>calc()</code> syntax…</p>
<pre class="language-js " style="counter-reset: linenumber 0"><code class="language-js">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">calc(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>width<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> / 2)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">// &lt;body style="width: calc(960px / 2);"></span>
</code></pre>
<p>This is all well and good for simple calculations like that but what happens when we start getting spicy?</p>
<pre class="language-js " style="counter-reset: linenumber 0"><code class="language-js"><span class="token keyword">const</span> padding <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span><span class="token string">'padding'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8px</span>
<span class="token keyword">const</span> margin <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span><span class="token string">'margin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 32px</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">calc(calc(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>width<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> / 2) + calc(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>padding<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> + calc(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>margin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> * 0.5))</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token comment">// &lt;body style="width: calc(calc(960px / 2) + calc(8px + calc(32px * 0.5)));"></span>
</code></pre>
<p>Ew! Gross! 🤮</p>
<p>What you <em>actually</em> want is to be able to treat that string like a real number, right?</p>
<h2>Make that string an integer</h2>
<p>A fun quirk/feature of JavaScript is that <code>parseInt()</code> and <code>parseFloat()</code> can be used on any string that <em>starts</em> with a number and it will just magically work!</p>
<pre class="language-js " style="counter-reset: linenumber 0"><code class="language-js">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>margin<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>padding<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span> <span class="token comment">// &lt;body style="width: 504px;"></span>
</code></pre>
<p>The magic here is JavaScript's <em>Type Inference</em> - it's doing a lot of the heavy lifting in assuming that - because you're &quot;parsing an integer&quot; - the string passed <strong>is an integer</strong>.</p>
<p>Again, this works but I, for one, don't like things to run off assumptions. And, no, rewriting the application in TypeScript isn't going to happen, Reply Guy!</p>
<h2>Make that string <em>definitely</em> an integer</h2>
<p>If you just want the code, here you are…</p>
<pre class="language-js " style="counter-reset: linenumber 0"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">numberizeValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> <span class="token operator">!</span>x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9.]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3>Now, let's break that down!</h3>
<p>Firstly, we're going to use <code>parseFloat()</code> because it will allow us to &quot;numberize&quot; numbers with decimal places. We're going to assume our numbers are decimal and return the result using Base 10.</p>
<p>Next, we explode the provided string into an array with <code>input.split('')</code>. The use of <code>''</code> gives us an array of individual characters.</p>
<p>We can now filter the array to remove any characters that are <em>not</em> numbers using <code>.filter(x =&gt; !x.match(/[0-9.]/g)</code>. The RegEx in the <code>match</code> function is looking for decimal numbers between <em>0</em> and <em>9</em>, and the full-stop/period character.</p>
<p>Now the array has been stripped of letters and (most) punctuation, we can <code>join</code> the array back into a string to be parsed.</p>
<img srcset="https://thomasrigby.com/images/4a7nD-jq-U-300.webp 300w, https://thomasrigby.com/images/4a7nD-jq-U-600.webp 600w, https://thomasrigby.com/images/4a7nD-jq-U-300.jpeg 300w, https://thomasrigby.com/images/4a7nD-jq-U-600.jpeg 600w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px" src="https://thomasrigby.com/images/4a7nD-jq-U-300.jpeg" loading="lazy" decoding="async" alt="numberizePixels examples" width="600" height="266" style="aspect-ratio: 300/133" />

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Quick and dirty server</title>
      <link href="https://thomasrigby.com/articles/quick-and-dirty-server/"/>
      <id>https://thomasrigby.com/articles/quick-and-dirty-server/</id>
      <published>2021-03-11T00:00:00Z</published>
      <updated>2021-03-11T00:00:00Z</updated>
      <summary type="html">
        Sometimes you just want to serve a static site without installing all kinds of stuff
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/u9WsDsh1uo-300.jpeg" alt="A python" />
          
          <p>I often find myself working on proof of concepts that consist of (at most) an <code>index.html</code>, <code>style.css</code>, and <code>index.js</code>.</p>
<p>It always seems overkill to have some kind of &quot;local server&quot; plugin imported into the project - especially because I use a MacBook Pro and it has <a href="https://www.python.org/">Python</a> installed by default.</p>
<p>A neat little trick for serving a static site without additional dependencies is this…</p>
<ol>
<li>Navigate to the folder you want to serve</li>
<li><code>python -m SimpleHTTPServer</code></li>
<li>Open <code>http://localhost:8000</code></li>
</ol>
<p>What if PORT 8000 is in use?</p>
<p>Pass a different port number like this: <code>python -m SimpleHTTPServer %%PORT_NUMBER%%</code></p>
<p>If you want it to be <em>even simpler</em> - stick this somewhere in your bash config!</p>
<pre class="language-bash " style="counter-reset: linenumber 0"><code class="language-bash"><span class="token function-name function">srv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  python <span class="token parameter variable">-m</span> SimpleHTTPServer
<span class="token punctuation">}</span>
</code></pre>
<p>It doesn't come with any of the fancy stuff that other &quot;local server&quot; plugins might come with like hot reloading or compiling Scss but, if all you want is a small static site launching, why reach for another dependency?</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Increase WordPress maximum upload limit in Docker</title>
      <link href="https://thomasrigby.com/articles/increase-wordpress-uploads-limits-in-docker/"/>
      <id>https://thomasrigby.com/articles/increase-wordpress-uploads-limits-in-docker/</id>
      <published>2021-03-31T00:00:00Z</published>
      <updated>2021-03-31T00:00:00Z</updated>
      <summary type="html">
        &amp;quot;filename exceeds the maximum upload size for this site&amp;quot; 🙄
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/2K8V4Rut52-300.jpeg" alt="A stack of VHS cassettes" />
          
          <p>I've recently moved over to using <a href="https://www.docker.com/">Docker</a> to manage my WordPress builds. It has many advantages and, the more comfortable I get, relatively few disadvantages. Not sponsored or anything, it's just boss!</p>
<p>One thing I find happens <strong>every single time</strong> is trying to upload an image into the Media Library and getting the &quot;filename exceeds the maximum upload size for this site&quot; error.</p>
<img srcset="https://thomasrigby.com/images/z2WI7aunTr-300.webp 300w, https://thomasrigby.com/images/z2WI7aunTr-600.webp 600w, https://thomasrigby.com/images/z2WI7aunTr-300.jpeg 300w, https://thomasrigby.com/images/z2WI7aunTr-600.jpeg 600w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px" src="https://thomasrigby.com/images/z2WI7aunTr-300.jpeg" loading="lazy" decoding="async" alt="filename exceeds the maximum upload size for this site" width="600" height="370" style="aspect-ratio: 300/185" />
<p>Inevitably, I find myself sticking <code>docker wordpress increase upload limit</code> into Bing (yes, <a href="https://www.bing.com/">Bing</a>). There are a few answers knocking around - some of which I can get to work, some of which I can't.</p>
<p>This is the solution that I find works for me. I'm posting it here to save myself an hour of Googling next time! 😅</p>
<h2>Step 1: <code>uploads.ini</code></h2>
<p>Firstly, create an <code>uploads.ini</code> file in your project. I like to keep mine in a specific <code>config</code> folder with my <code>.htaccess</code> file.</p>
<h2>Step 2: Add your options</h2>
<p>In the <code>uploads.ini</code> file, add the following:</p>
<pre class="language-bash " style="counter-reset: linenumber 0"><code class="language-bash">upload_max_filesize <span class="token operator">=</span> 16M
post_max_size <span class="token operator">=</span> 24M
</code></pre>
<p>Feel free to change the values to suit your needs.</p>
<h2>Step 3: Include your file</h2>
<p>The file now needs mounting using <a href="https://docs.docker.com/storage/volumes/">volumes</a>.</p>
<p>If you're using <code>docker-compose</code>, it will look a little something like this:</p>
<pre class="language-yaml " style="counter-reset: linenumber 0"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.1'</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">wordpress</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> wordpress<span class="token punctuation">:</span>5.7.0<span class="token punctuation">-</span>php7.3<span class="token punctuation">-</span>apache
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./config/uploads.ini<span class="token punctuation">:</span>/usr/local/etc/php/conf.d/uploads.ini
      <span class="token punctuation">-</span> ./www/themes<span class="token punctuation">:</span>/var/www/html/wp<span class="token punctuation">-</span>content/themes<span class="token punctuation">:</span>delegated
      <span class="token punctuation">-</span> ./www/plugins<span class="token punctuation">:</span>/var/www/html/wp<span class="token punctuation">-</span>content/plugins<span class="token punctuation">:</span>delegated

<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">wordpress</span><span class="token punctuation">:</span>
</code></pre>
<h2>And that's it!</h2>
<p>Start or restart Docker and you'll no longer get nasty errors when you try to upload that massive photo.</p>
<p>Just be aware that upload limits exist for good reason - nobody wants to have to download a tonne of 10Mb 1920×1080 images that are only going to be used as 300px thumbnails…</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Quick and dirty carousel</title>
      <link href="https://thomasrigby.com/articles/quick-and-dirty-carousel/"/>
      <id>https://thomasrigby.com/articles/quick-and-dirty-carousel/</id>
      <published>2021-04-13T00:00:00Z</published>
      <updated>2021-04-13T00:00:00Z</updated>
      <summary type="html">
        AKA Move the first item in an array to the end repeatedly
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/wdeFeAeIaN-300.jpeg" alt="people riding carousel during daytime" />
          
          <p>One thing I find myself looking up time and time again, is;</p>
<blockquote>
<p>How do I move the first item of an array to the end? 🤔</p>
</blockquote>
<p>So, in the spirit of <em>If I write it down, I'll never forget it</em>, here's a quick and dirty carousel that does just that.</p>
<pre class="language-javascript " style="counter-reset: linenumber 0"><code class="language-javascript">
<span class="token keyword">const</span> duration <span class="token operator">=</span> <span class="token number">5000</span>

<span class="token keyword">const</span> carousel <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'[data-carousel]'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> slides <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>carousel<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'[data-slide]'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> <span class="token function-variable function">initCarousel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">carousel<span class="token punctuation">,</span> slides</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  slides<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>slides<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  carousel<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span>
  carousel<span class="token punctuation">.</span><span class="token function">insertAdjacentElement</span><span class="token punctuation">(</span><span class="token string">'afterbegin'</span><span class="token punctuation">,</span> slides<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">initCarousel</span><span class="token punctuation">(</span>carousel<span class="token punctuation">,</span> slides<span class="token punctuation">)</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span>

</code></pre>
<h2>Let's break that down…</h2>
<p>First we set the duration, 5000 milliseconds (5 seconds) should be good enough.</p>
<pre class="language-javascript " style="counter-reset: linenumber 0"><code class="language-javascript"><span class="token keyword">const</span> duration <span class="token operator">=</span> <span class="token number">5000</span>
</code></pre>
<p>Next, identify your elements. Your common or garden carousel consists of a container (<code>&lt;div data-carousel /&gt;</code> in this case) and some slides (<code>&lt;article data-slide /&gt;</code> in this case).</p>
<pre class="language-javascript " style="counter-reset: linenumber 0"><code class="language-javascript"><span class="token keyword">const</span> carousel <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'[data-carousel]'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> slides <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>carousel<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'[data-slide]'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre>
<p>Now, here's where the magic happens!</p>
<p>We have a smol function that moves the first item in the array to the end of the array then replaces the entire <code>innerHTML</code> of the container with the first slide in the array.</p>
<pre class="language-javascript " style="counter-reset: linenumber 0"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">initCarousel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">carousel<span class="token punctuation">,</span> slides</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  slides<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>slides<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  carousel<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span>
  carousel<span class="token punctuation">.</span><span class="token function">insertAdjacentElement</span><span class="token punctuation">(</span><span class="token string">'afterbegin'</span><span class="token punctuation">,</span> slides<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Finally, we run the function over and over again, every 5 seconds…</p>
<pre class="language-javascript " style="counter-reset: linenumber 0"><code class="language-javascript"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">initCarousel</span><span class="token punctuation">(</span>carousel<span class="token punctuation">,</span> slides<span class="token punctuation">)</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span>
</code></pre>
<h2>Conclusion</h2>
<p>And that's it!</p>
<p>OK, sure, it doesn't have any fancy transitions but hopefully I'll remember the magic formula! 🙏</p>
<pre class="language-javascript " style="counter-reset: linenumber 0"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<p class="codepen" data-height="265" data-theme-id="dark" data-default-tab="js,result" data-user="hryggrbyr" data-slug-hash="xxgWQoj" data-preview="true" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="Quick and dirty carousel">
  <span>See the Pen <a href="https://thomasrigby.com/pen/xxgWQoj">
  Quick and dirty carousel</a> by Thomas Rigby (<a href="https://thomasrigby.com/articles/quick-and-dirty-carousel/">@hryggrbyr</a>)
  on <a href="https://codepen.io/">CodePen</a>.</span>
</p>
<script async="" src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Wait!</title>
      <link href="https://thomasrigby.com/articles/wait/"/>
      <id>https://thomasrigby.com/articles/wait/</id>
      <published>2021-04-19T00:00:00Z</published>
      <updated>2021-04-19T00:00:00Z</updated>
      <summary type="html">
        Why the rush? Whether you&#39;re faking an API response, introducing deliberate cognitive drain, or simply want to slow things down this function has got you, baby!
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/TTFbVTuRN1-300.jpeg" alt="pedestrian signage displaying wait" />
          
          <p>Why the rush…?!</p>
<p>Whether you're faking an API response, introducing deliberate cognitive drain, or simply want to slow things down this utility function has got you, baby! 😎</p>
<pre class="language-js " style="counter-reset: linenumber 0"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">delay</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">rv</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>rv<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h2>Cool! How do I use it?</h2>
<pre class="language-js " style="counter-reset: linenumber 0"><code class="language-js"><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello world</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>Nice! Does it work with <code>async/await</code>?</p>
<p>Heck, yes, it does!</p>
<pre class="language-js " style="counter-reset: linenumber 0"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">functionName</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>

  <span class="token function">doFirstThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>

  <span class="token function">doNextThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Generate a random alphanumeric string using JavaScript</title>
      <link href="https://thomasrigby.com/articles/generate-a-random-alphanumeric-string-in-javascript/"/>
      <id>https://thomasrigby.com/articles/generate-a-random-alphanumeric-string-in-javascript/</id>
      <published>2021-04-29T00:00:00Z</published>
      <updated>2021-04-29T00:00:00Z</updated>
      <summary type="html">
        Today I had to send an &quot;ID&quot; in the body of my POST request. It turns out that the API doesn&#39;t care what the value is - it just needs to be alphanumeric, exactly 18 characters long, and not already in the system.
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/ivOdwv24Qg-300.jpeg" alt="Brown rope on grass" />
          
          <p>Today I had to send an &quot;<code>ID</code>&quot; in the body of my POST request. It turns out that the API doesn't care what the value is - it just needs to be alphanumeric (a-z, A-Z, 0-9), exactly 18 characters long, and not already in the system.</p>
<p>So I decided to generate a random string<sup>*</sup>!</p>
<h2>Shut up already and give me the code!</h2>
<pre class="language-js " style="counter-reset: linenumber 0"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">randomString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">len <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>x <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> x<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span>
</code></pre>
<h2>Now, let's break that down!</h2>
<p>There's a lot going on in that one line!</p>
<p>Firstly, we create an <code>Array</code> with twice as many &quot;characters&quot; as we need.</p>
<p>Then we <code>fill</code> each item in the array with the number 1000.</p>
<p>For each of those items (<code>.map()</code>), we randomise the number by multiplying it by a randomly generated number between 0 and 1 (<code>x * Math.random()</code>). This is then converted into a two-character string. We only need the first character so let's grab that with <code>charAt(0)</code>. You could also use <code>[0]</code> as shorthand.</p>
<p>Now we have an Array of twice as many random alphanumeric characters as we asked for.</p>
<p>Just to be on the safe side, we remove any empty or falsey values using <code>.filter(Boolean)</code> - this will get rid of any zeroes but meh 🤷‍♀️</p>
<p>The remaining values are shuffled into a new random order with <code>.sort(() =&gt; Math.random() - 0.5)</code>.</p>
<p>Our new array is then looped through again and every even-index character is UPPERCASED (if possible - the numbers 0 to 9 cannot be uppercased).</p>
<p>Now we have an array of much more random characters, but this is <code>randomString</code> - what use is an array?! We need to <code>join('')</code> the array together. The <code>''</code> separator is necessary - without it our string would be full of commas - gross!</p>
<p>Finally, remember how the string is twice as long as we need? - we return the correct number of characters from the start of the string.</p>
<h2>Conclusion</h2>
<p>So there it is! I have no idea how well it performs but you probably shouldn't be generating random strings in production anyway! 😬</p>
<p>What's this is probably most useful for is playing around with the individual components it's made up of:</p>
<ul>
<li>Fill: <code>Array.fill()</code></li>
<li>Shuffle: <code>Array.sort(() =&gt; Math.random() - 0.5)</code></li>
<li>Modulos: <code>i % 2 === 0</code></li>
<li>Remove 'falsey' values: <code>Array.filter(Boolean)</code></li>
</ul>
<p class="codepen" data-height="265" data-theme-id="dark" data-default-tab="js,result" data-user="hryggrbyr" data-slug-hash="ExZGEKQ" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="Generate a random Alphanumeric String using JavaScript">
  <span>See the Pen <a href="https://thomasrigby.com/pen/ExZGEKQ">
  Generate a random Alphanumeric String using JavaScript</a> by Thomas Rigby (<a href="https://thomasrigby.com/articles/generate-a-random-alphanumeric-string-in-javascript/">@hryggrbyr</a>)
  on <a href="https://codepen.io/">CodePen</a>.</span>
</p>
<script async="" src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
<aside>
  <sup>*</sup> A better solution to this problem is&hellip;
<pre class="language-js " style="counter-reset: linenumber 0"><code class="language-js">  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">btoa</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>…but where's the fun in that?! 😈</p>
</aside>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Formatting JSON.stringify()</title>
      <link href="https://thomasrigby.com/articles/formatting-json-stringify/"/>
      <id>https://thomasrigby.com/articles/formatting-json-stringify/</id>
      <published>2021-05-10T00:00:00Z</published>
      <updated>2021-05-10T00:00:00Z</updated>
      <summary type="html">
        I occasionally find myself dumping stringified JSON into a &amp;lt;pre/&amp;gt; tag in my markup. It inevitably looks horrible. Here&#39;s how to prettify your JSON.stringify() output.
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/IOpEG4BhKo-300.jpeg" alt="8-bit Jason Voorhees" />
          
          <p>I occasionally find myself dumping stringified JSON into a <code>&lt;pre/&gt;</code> tag in my markup. It inevitably looks horrible. In the spirit of <em>If I write it down I won't forget it</em>, here's how to prettify your <code>JSON.stringify()</code> output.</p>
<p>I always forget that <code>JSON.stringify()</code> takes <em>three</em> arguments:</p>
<ol>
<li>The given object</li>
<li>An optional replacer</li>
<li>An optional spacing count</li>
</ol>
<p>You can find more detail on the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">MDN Web Docs for JSON.stringify</a> but I'm getting into the habit of using this as my default stringify function…</p>
<pre class="language-javascript " style="counter-reset: linenumber 0"><code class="language-javascript"><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Adding that <code>, null, 2</code>, turns this…</p>
<img srcset="https://thomasrigby.com/images/Vj6M4ewwka-300.webp 300w, https://thomasrigby.com/images/Vj6M4ewwka-600.webp 600w, https://thomasrigby.com/images/Vj6M4ewwka-300.jpeg 300w, https://thomasrigby.com/images/Vj6M4ewwka-600.jpeg 600w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px" src="https://thomasrigby.com/images/Vj6M4ewwka-300.jpeg" loading="lazy" decoding="async" alt="Displayed stringified JSON without formatting" width="600" height="336" style="aspect-ratio: 300/168" />
<p>…into this…</p>
<img srcset="https://thomasrigby.com/images/HjxnodWcDF-300.webp 300w, https://thomasrigby.com/images/HjxnodWcDF-600.webp 600w, https://thomasrigby.com/images/HjxnodWcDF-300.jpeg 300w, https://thomasrigby.com/images/HjxnodWcDF-600.jpeg 600w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px" src="https://thomasrigby.com/images/HjxnodWcDF-300.jpeg" loading="lazy" decoding="async" alt="Displayed stringified JSON with formatting" width="600" height="707" style="aspect-ratio: 300/353" />
<h2>Bonus</h2>
<p>Remember that <code>replacer</code>? You can narrow down what is displayed by dropping an array of keys in there instead of <code>null</code>.</p>
<pre class="language-javascript " style="counter-reset: linenumber 0"><code class="language-javascript"><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<img srcset="https://thomasrigby.com/images/O9s7m50bX6-300.webp 300w, https://thomasrigby.com/images/O9s7m50bX6-300.jpeg 300w" sizes="(max-width: 300px) 300px" src="https://thomasrigby.com/images/O9s7m50bX6-300.jpeg" loading="lazy" decoding="async" alt="Displayed stringified JSON partial with formatting" width="300" height="126" style="aspect-ratio: 300/126" />
<h2>Credits</h2>
<p>The data displayed in the above screenshots is provided by <a href="https://randomuser.me/">randomuser.me</a> which is an API for generating user data. They describe themselves as <q>Like Lorem Ipsum, but for people</q> and they're a really useful resource. #notsponsored.</p>
<p>I used the ever useful <a href="https://quokkajs.com/">QuokkaJS</a> to run my <code>JSON.stringify</code> code. For those that don't know, <q>Quokka.js is a developer productivity tool for rapid JavaScript / TypeScript prototyping</q> and is available as a <a href="https://marketplace.visualstudio.com/items?itemName=WallabyJs.quokka-vscode">VS Code plugin</a>. Again, not sponsored - just a fan! 😃</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>You have a better laptop than your users</title>
      <link href="https://thomasrigby.com/articles/you-have-a-better-laptop-than-your-user/"/>
      <id>https://thomasrigby.com/articles/you-have-a-better-laptop-than-your-user/</id>
      <published>2021-05-20T00:00:00Z</published>
      <updated>2021-05-20T00:00:00Z</updated>
      <summary type="html">
        I have a decent laptop and I&#39;m lucky enough to have a strong, reliable internet connection. Not everyone does.
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/lK-hHeuirY-300.jpeg" alt="Silver MacBook Pro on white table" />
          
          <p>I have a fairly decent laptop provided by my employer and I'm lucky enough to have a strong, reliable internet connection. Not everyone does. I'll say that again for the Bro's at the back:</p>
<blockquote>
<p>Not all of your users will have a top-spec device and good wifi like you do.</p>
</blockquote>
<p>In the past I've been guilty of assuming that everyone has a comparable experience to myself.</p>
<p><strong>This leads to Bad Habits™️.</strong></p>
<h2>How to be better</h2>
<p>Optimise for performance over appearance. Basically, don't make someone download 5Gb of images and 500Mb of JavaScript just to read your Terms &amp; Conditions page.</p>
<p>Test on spotty wifi. Try using the site on a train or in a coffee shop or using the City's free wifi (if you have it where you are). This is how your user will experience your site - not via 100Gb Ethernet cables.</p>
<p>Test on budget devices - find a few common mid-priced devices (you could probably get them from <a href="https://www.ebay.co.uk/sch/i.html?_from=R40&amp;_trksid=p2334524.m570.l1313&amp;_nkw=iphone+7&amp;_sacat=0&amp;LH_TitleDesc=0&amp;_osacat=0&amp;_odkw=iphone+7">eBay</a>) and test on those instead.</p>
<p>If you're feeling extra spicy - make sure at least one of those devices has a cracked screen for a truly authentic browsing experience 😜</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>I am a lazy developer or How to write 438 lines of nginx redirects</title>
      <link href="https://thomasrigby.com/articles/i-am-a-lazy-developer-nginx-redirects/"/>
      <id>https://thomasrigby.com/articles/i-am-a-lazy-developer-nginx-redirects/</id>
      <published>2021-06-07T00:00:00Z</published>
      <updated>2021-06-07T00:00:00Z</updated>
      <summary type="html">
        I don&#39;t mean to imply that I cut corners and churn out shoddy code. I just hate doing repetitive tasks that bore the bejesus out of me.
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/uouU0byCYy-300.jpeg" alt="Diverted Traffic" />
          
          <p>When I say &quot;I am a lazy developer&quot;, I don't mean to imply that I cut corners and churn out shoddy code. I just hate doing repetitive tasks that bore the bejesus out of me!</p>
<p>Obviously, I'm not alone in this - it's the reason <a href="https://www.smashingmagazine.com/2016/06/harness-machines-productive-task-runners/">task runners</a> exist.</p>
<p>Recently, at work, I replatformed an existing e-commerce site which resulted in, amongst other things, a giant list of redirects from existing urls to the new url structure.</p>
<p><a href="https://moz.com/learn/seo/redirection">Permanent redirects (301s for the people who like numbers) are essential for persistence of good SEO</a>. The downside is adding the old url and the new url to the line <code>rewrite ^/&lt;oldlocation&gt;$ &lt;newlocation&gt; permanent;</code> in my nginx config file. What's a lazy guy to do when you have to do this 438 times…?</p>
<p>Well, this immediately looks like a case for loops and variables!</p>
<h2>How can <em>you</em> do this wizardry?!</h2>
<p>You'll need four things;</p>
<ol>
<li><a href="https://nodejs.org/en/">NodeJS</a> installed on your machine,</li>
<li>a command-line application like Hyper, iTerm2, or Terminal,</li>
<li>a CSV file of the required redirects, and</li>
<li>this handy class in an <code>index.js</code> file.</li>
</ol>
<pre class="language-bash " style="counter-reset: linenumber 0"><code class="language-bash">// excel.csv

old,new
https://thomasrigby.com/newyork/, https://thomasrigby.com/locations/newyork/
https://thomasrigby.com/paris/, https://thomasrigby.com/locations/paris/
https://thomasrigby.com/peckham/, https://thomasrigby.com/locations/peckham/
</code></pre>
<pre class="language-js " style="counter-reset: linenumber 0"><code class="language-js"><span class="token comment">// index.js</span>

<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">GenerateNginxRedirectsFromCSV</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">input<span class="token punctuation">,</span> output</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> input <span class="token operator">||</span> <span class="token string">'./input.csv'</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>output <span class="token operator">=</span> output <span class="token operator">||</span> <span class="token string">'./output.txt'</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>csv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>csv <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token string">'r'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>results <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>csv<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rewrite ^/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?$ </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> permanent;\n</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>results<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">appendFileSync</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>output<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenerateNginxRedirectsFromCSV</span><span class="token punctuation">(</span><span class="token string">'./excel.csv'</span><span class="token punctuation">,</span> <span class="token string">'./redirects.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
task<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


</code></pre>
<p>Put both files in the same folder, open the folder in your command line Terminal application and run <code>node ./</code>. This will generate a file (called <code>output.txt</code> unless you've changed it) listing your redirects in an easy-to-copypasta format. Paste the contents into your <code>nginx.conf</code> file.</p>
<h2>Cool! How does it work?</h2>
<p>There's a lot going on here so let's go through it.</p>
<pre class="language-js " style="counter-reset: linenumber 0"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><a href="https://nodejs.org/api/fs.html">fs</a> is the NodeJS File System module. I won't go into detail here but, basically, it allows you to <em>Read from</em> and <em>Write to</em> files on your local system, servers, or whereever Node is installed.</p>
<pre class="language-js " style="counter-reset: linenumber 0"><code class="language-js"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">input<span class="token punctuation">,</span> output</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> input <span class="token operator">||</span> <span class="token string">'./input.csv'</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>output <span class="token operator">=</span> output <span class="token operator">||</span> <span class="token string">'./output.txt'</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>csv <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>In the constructor, we set our scoped variables (including fallbacks) and the empty variables that will be populated by our fetched and formatted data.</p>
<pre class="language-js " style="counter-reset: linenumber 0"><code class="language-js"><span class="token keyword">async</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>As we can see from the <code>init()</code> function, our three basic steps are;</p>
<ol>
<li>Get the contents of the CSV file</li>
<li>Convert it into a format nginx can understand</li>
<li>Write the results to a file</li>
</ol>
<h3>Step 1 - Get the contents of the CSV</h3>
<pre class="language-js " style="counter-reset: linenumber 0"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>csv <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token string">'r'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Read the input filepath and save the contents into the <code>this.csv</code> variable for later use.</p>
<h3>Step 2 - Convert CSV to nginx</h3>
<p>Since the output of the csv file is consistent, and so is the format of a JSON object, we can map one to the other.</p>
<pre class="language-js " style="counter-reset: linenumber 0"><code class="language-js"><span class="token keyword">async</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>results <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>csv<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rewrite ^/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?$ </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> permanent;\n</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Firstly, replace any <code>\n</code> line-endings, then explode the string into an array at each line-break (<code>\r</code>).</p>
<p>Then, we generate an array of results.</p>
<ul>
<li>Filter out any empty lines with <code>.filter(Boolean)</code></li>
<li>Remove the line with the headers using <code>.slice(1)</code></li>
<li>For each remaining line, generate a string to copy into <code>nginx.conf</code>.</li>
</ul>
<p>It should look a little like this;</p>
<pre class="language-bash " style="counter-reset: linenumber 0"><code class="language-bash">rewrite ^/https://thomasrigby.com/newyork/?$  https://thomasrigby.com/locations/newyork/ permanent<span class="token punctuation">;</span>
</code></pre>
<h3>Step 3 - Write the output file</h3>
<p>Now that <code>this.results</code> is an array of strings, we can</p>
<ul>
<li>loop through each instance</li>
<li>insert the result to an ouput file using <em>fs</em>.</li>
</ul>
<p>All that's left to do is open the resulting file and copypasta the content into your <code>nginx.conf</code> file.</p>
<p>Don't forget to gracefully restart the nginx server. Forgetting this has caused me untold headaches!</p>
<pre class="language-bash " style="counter-reset: linenumber 0"><code class="language-bash">nginx <span class="token parameter variable">-t</span> <span class="token operator">&amp;&amp;</span> nginx <span class="token function">service</span> restart
</code></pre>
<h2>Conclusion</h2>
<p>Now, I'm sure there are <s>different</s> better ways to do this but, off the top of my head, this seemed quick and simple enough to whip together.</p>
<p>I've no idea how long it would have taken me to manually do this but I'm certain it would have taken longer than to write this bit of code.</p>
<p>Not only did I save myself time on that particular day, whenever I (or someone else on my team) need to do this again I have a useful tool to reuse again and again 😎</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Your codez is overkill</title>
      <link href="https://thomasrigby.com/articles/your-codez-is-overkill/"/>
      <id>https://thomasrigby.com/articles/your-codez-is-overkill/</id>
      <published>2021-06-08T00:00:00Z</published>
      <updated>2021-06-08T00:00:00Z</updated>
      <summary type="html">
        We all love writing code - that&#39;s why we&#39;re doing this - but sometimes we can seriously over-engineer things.
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/lMzH87j2ti-300.jpeg" alt="Thrash metal band Overkill performing live at Party.San Open Metal 2017" />
          
          <p>Once upon a time, I encountered a bug.</p>
<p>The implementation was for a &quot;View PDF&quot; button: when the user clicks the button, a PDF opens in a new browser tab.</p>
<h2>The problem</h2>
<p>The code looked a bit like this…</p>
<pre class="language-jsx " style="counter-reset: linenumber 0"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">downloadDocument</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">document</span><span class="token punctuation">)</span> <span class="token operator">=></span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">ENDPOINT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>document<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>
          <span class="token literal-property property">Authorization</span><span class="token operator">:</span> <span class="token constant">AUTH_TOKEN</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>
      status<span class="token punctuation">,</span>
      statusText<span class="token punctuation">,</span>
      data
    <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> jwt<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>responseStatus <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
          response<span class="token punctuation">.</span>errors <span class="token operator">?</span>
          response<span class="token punctuation">.</span>errors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>message <span class="token operator">:</span>
          response<span class="token punctuation">.</span>responseMessage
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">401</span><span class="token punctuation">,</span>
        <span class="token literal-property property">error</span><span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">webDownload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">downloadDocument</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response <span class="token operator">||</span> response<span class="token punctuation">.</span>responseStatus <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">const</span> <span class="token punctuation">{</span>
        href
      <span class="token punctuation">}</span> <span class="token operator">=</span> response<span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>href<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"No file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      window<span class="token punctuation">.</span>location <span class="token operator">=</span> href<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token function">appDispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"APP_ERROR"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">"Failed to access the file"</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>
  <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>webDownload<span class="token punctuation">}</span></span>
  <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Icon</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file-download<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
</code></pre>
<h2>The solution</h2>
<p>The actual solution I eventually used was to fix the <code>window.location = href</code> line.</p>
<p>It worked but, later that day, I started thinking that the <q>correct</q> answer would be…</p>
<blockquote>
<p>Use a link!</p>
</blockquote>
<p>If the criteria are: <em>I click a button and the PDF opens in a new tab</em>.</p>
<p>Then the only code needed is;</p>
<pre class="language-html " style="counter-reset: linenumber 0"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> 
  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>
  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/path/to/file.pdf<span class="token punctuation">"</span></span>
  <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>View file.pdf<span class="token punctuation">"</span></span>
  <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span>
  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nofollow noopener noreferrer<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span>
  View pdf
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
</code></pre>
<h2>Conclusion</h2>
<p>Sometimes codebases are quagmires of over-engineered code that blinker us to the best solution.</p>
<p>It was all too easy to dive into that convoluted code to find the bug - and it was tricky to figure out what was causing the issue because there was so much code to read.</p>
<p>There's nothing really wrong with the code as it is — it handles errors, authenticates requests, JWT encodes traffic, abstracts the download function so it can be used elsewhere; it's just overkill for <em>I click a button and the PDF opens in a new tab</em>.</p>
<blockquote>
<p>There are no bugs in the code you didn't write.</p>
</blockquote>
<p>PS: Whatever you do, try to avoid this… 🤣</p>
<img srcset="https://thomasrigby.com/images/BjngFZg5ym-300.webp 300w, https://thomasrigby.com/images/BjngFZg5ym-600.webp 600w, https://thomasrigby.com/images/BjngFZg5ym-300.jpeg 300w, https://thomasrigby.com/images/BjngFZg5ym-600.jpeg 600w" sizes="(max-width: 300px) 300px,(max-width: 600px) 600px" src="https://thomasrigby.com/images/BjngFZg5ym-300.jpeg" loading="lazy" decoding="async" alt="A JavaScript function that essentially does nothing" width="600" height="551" style="aspect-ratio: 300/275" />

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>WordPress forgotten password localhost hack</title>
      <link href="https://thomasrigby.com/articles/wordpress-local-forgot-password-hack/"/>
      <id>https://thomasrigby.com/articles/wordpress-local-forgot-password-hack/</id>
      <published>2021-06-10T00:00:00Z</published>
      <updated>2021-06-10T00:00:00Z</updated>
      <summary type="html">
        Forgotten the password to your local CMS? Can&#39;t email a password reset? Here&#39;s my tried-and-tested solution.
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/gRaKmQKMtj-300.jpeg" alt="A leet hacker bypasses security. Probably." />
          
          <p>I have lost count of the number of times I've forgotten the password to the local or development CMS.</p>
<p>My natural instinct is to click the <em>Forgot Password</em> link but, obviously, there's no way to trigger that email from the local system.</p>
<p>I've spent too long hunting through articles on how to recover the forgotten password. The quickest and easiest solution that I've found is to change the password manually in the database.</p>
<h2>How do we do that then?</h2>
<p>WordPress stores passwords in the <code>wp_users</code> table. The prefix may be different if you have elected to change that in the <code>wp-config.php</code> file. It's good practice to do that for security.</p>
<p>When you look at the table, it'll look a little like this…</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>user_login</th>
<th>user_pass</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td></td>
<td>$P$BHpcLw/aWsTPmeDprzXwOEl45bJm9A3</td>
</tr>
</tbody>
</table>
<p>WordPress stores your password as an <a href="https://en.wikipedia.org/wiki/MD5">MD5 hashed string</a>. This prevents anyone with access to the database seeing confidential information in plain text.</p>
<p>WordPress salts the password using <a href="https://www.openwall.com/phpass/">PHPass</a> (as you can see from the <code>$P$</code> at the start of the example password). This hack will still work though as, even if your password has been salted, <a href="https://wordpress.org/support/article/resetting-your-password/">you can still replace the password with an MD5 hash, and WordPress will let you log in</a>.</p>
<p>If this <em>wasn't</em> obfuscated like this, we'd be able to copy our password and paste it into the login form…but we can't - and for good reason!</p>
<p>So, to fix our little problem, we need to replace the existing hashed password with a new hashed password - we can't overwrite the MD5 hash with plain text because that won't work.</p>
<p>I have <a href="https://marketplace.visualstudio.com/items?itemName=deerawan.vscode-hasher">Hasher</a> installed as a plugin in VS Code. If you don't use VS Code or don't want to use this extension, <a href="https://www.md5hashgenerator.com/">MD5 Hash Generator Online</a> works pretty well.</p>
<p>I would recommend that you don't create your &quot;forever password&quot; using these hash generators though. Overwrite the existing password with something easy to remember and <strong>very, very temporary</strong> - a favourite of mine is <code>Pa55word!</code> —</p>
<pre class="language-bash " style="counter-reset: linenumber 0"><code class="language-bash">267057150e34eca5c6af39ec9b30864e
</code></pre>
<p>Once the password has been changed, you can log in with your new password <strong>and immediately change it to something more secure</strong>.</p>
<p>I hope this helps you as much as it has helped me. 😎</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Semantic HTML</title>
      <link href="https://thomasrigby.com/articles/semantic-html/"/>
      <id>https://thomasrigby.com/articles/semantic-html/</id>
      <published>2021-06-11T00:00:00Z</published>
      <updated>2021-06-11T00:00:00Z</updated>
      <summary type="html">
        Semantic HTML is the process of using HTML5 tags to reinforce the meaning of the information contained within a webpage or application.
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/RTa6fyILN9-300.jpeg" alt="Computer monitor display HTML code" />
          
          <p>Semantic HTML is the process of using HTML5 tags to reinforce the meaning of the information contained within a webpage or application.</p>
<p><a href="https://en.wikipedia.org/wiki/HTML5">HTML5</a> was introduced in October 2014 and introduced several new element tags to provide <em>explicit</em> meaning to the content of a website. And, as all websites are <em>nothing more</em> than a means for conveying content, this is the most important foundation for any site.</p>
<p>Bluntly, semantic HTML says what an element is instead of using a <code>&lt;div&gt;</code> for everything.</p>
<h2>Div Soup™️</h2>
<p>Consider this piece of code…</p>
<pre class="language-jsx " style="counter-reset: linenumber 0"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
	</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>image<span class="token punctuation">.</span>src<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
	</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>h1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">
	</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>excerpt<span class="token punctuation">}</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>categories<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">category</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category-tag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>category<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<p>While this is not an unacceptable way of using markup to describe a group of elements, it could also be confusing for a number of reasons.</p>
<p>We spend considerably more time reading code than writing it. A lot of us do not have the luxury of solely working with familiar code; we work in teams with several developers working on the same codebase or in agencies working with multiple codebases - some a lot older or less maintained.</p>
<p>While we read, much like users on a webpage do, we use an <a href="https://www.nngroup.com/articles/f-shaped-pattern-reading-web-content/">F pattern</a>. This means we’re basically scanning down the left-hand edge of the code to get a gist of what we’re dealing with.</p>
<p>The code above reads very much like “div, img, h1, div, div, div…”</p>
<h2>Semantic markup</h2>
<p>Now consider this refactored code…</p>
<pre class="language-jsx " style="counter-reset: linenumber 0"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>image<span class="token punctuation">.</span>src<span class="token punctuation">}</span></span> <span class="token attr-name">alt</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>image<span class="token punctuation">.</span>alt<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>excerpt<span class="token punctuation">}</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>categories<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">category</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>category<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>
</code></pre>
<p>Now the code above reads like “article, header, div, footer”.</p>
<p>In all honesty, it does require more markup than the previous example but, on the other hand, when we scan the code we can clearly see that this is an article with a header image and a title - there is a main body to the article, followed by a list of categories.</p>
<h2>Accessibility</h2>
<p>Your browser will scan through your website's DOM and decide if each node it encounters is useful and, if so, will add it to the Accessbility Tree.</p>
<p>Screen-readers and other assistive technologies then use the Accessibility Tree instead of the visual UI of your website.</p>
<p>The browser can better determine whether something should go in the Accessibility Tree if it can understand what the node is for - which is where semantics come in.</p>
<p>Browsers will happily ignore <code>div</code>s and <code>span</code>s because they semantically mean nothing - they're for visual layout and the Accessibility Tree cares not for visual layout!</p>
<p>Of course you could always pepper your <code>div</code>s with <code>role=&quot;button&quot;</code> or whatever but that goes against <a href="https://www.w3.org/TR/wai-aria-1.2/">WAI-ARIA recommendations</a>.</p>
<blockquote>
<p>It is not appropriate to create objects with style and script when the host language provides a semantic element for that type of object. While WAI-ARIA can improve the accessibility of these objects, accessibility is best provided by allowing the user agent to handle the object natively. For example, it's better to use an <code>h1</code> element in HTML than to use the <code>heading</code> role on a <code>div</code> element.</p>
</blockquote>
<h2>SEO</h2>
<p>Semantic HTML is not only for developers and screen readers - it also helps search engines crawl your content.</p>
<p>Don't take my word for it - <a href="https://developer.yoast.com/blog/why-your-websites-code-structure-matters/">Yoast recommends using semantic markup to improve ranking</a>.</p>
<p>We can improve on this even further by layering in <a href="http://schema.org/">Schema data</a>.</p>
<pre class="language-jsx " style="counter-reset: linenumber 0"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">itemscope</span> <span class="token attr-name">itemtype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schema.org/Article<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>image<span class="token punctuation">.</span>src<span class="token punctuation">}</span></span> <span class="token attr-name">alt</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>image<span class="token punctuation">.</span>alt<span class="token punctuation">}</span></span> <span class="token attr-name">itemprop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">itemprop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>headline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">itemprop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>articleBody<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>excerpt<span class="token punctuation">}</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>categories<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">category</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">itemprop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>articleSection<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>category<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>
</code></pre>
<p>Using semantic HTML and Schema data to define your structure means it’s quicker and more accurate for search bots to index your content because they don’t have to make assumptions about what something is.</p>
<h2>Violent Psychopaths</h2>
<p>Another benefit is that it becomes clearer for the next developer (even if that is you in the future) who will maintain this code.</p>
<aside>
  It is a known fact that any code you wrote six months ago might as well have been written by someone else. 😉
</aside>
<p>Using semantic HTML also goes towards your separation of concerns, keeping the “structure” and the “design” separate. Ensuring the markup describes the structure, leaving the css to describe the appearance will make things easier to adjust and maintain going forward.</p>
<blockquote>
<p>Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.</p>
<p><cite><a href="https://groups.google.com/g/comp.lang.c++/c/rYCO5yn4lXw/m/oITtSkZOtoUJ">John F Woods, 1991</a></cite></p>
</blockquote>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Catch your errors</title>
      <link href="https://thomasrigby.com/articles/catch-your-errors/"/>
      <id>https://thomasrigby.com/articles/catch-your-errors/</id>
      <published>2021-07-05T00:00:00Z</published>
      <updated>2021-07-05T00:00:00Z</updated>
      <summary type="html">
        If there&#39;s one thing I&#39;ve learned, it&#39;s that your code will go wrong. You need to accept that and catch your damn errors!
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/19AZcPE-qs-300.jpeg" alt="Gloved hand holding a baseball" />
          
          <p>All too often I have seen (and written) code that looks like this…</p>
<pre class="language-js " style="counter-reset: linenumber 0"><code class="language-js">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getSomeDataFromAnAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">handleTheHappyPath</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
</code></pre>
<p>Invariably, at some point, the API is down or the response is malformed or my internet connection drops off or some other reason I haven't thought of and my <code>handleTheHappyPath()</code> function simply doesn't work.</p>
<p>Troubleshooting errors is tricky at the best of times but it's even harder if your code is not set up to handle errors.</p>
<p>Here are a few different ways to handle failures. Which one you should use will depend on a variety of things such as the existing codebase, when you want to handle the failure, or what you need to do in your <code>handleTheHappyPath</code> function.</p>
<h2>Try/Catch</h2>
<pre class="language-js " style="counter-reset: linenumber 0"><code class="language-js"><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getSomeDataFromAnAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok <span class="token operator">||</span> response<span class="token punctuation">.</span>statusCode <span class="token operator">></span> <span class="token number">299</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">handleTheHappyPath</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'🚫  Oh noes!'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>Then</h2>
<pre class="language-javascript " style="counter-reset: linenumber 0"><code class="language-javascript">  <span class="token function">getSomeDataFromAnAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok <span class="token operator">||</span> response<span class="token punctuation">.</span>statusCode <span class="token operator">></span> <span class="token number">299</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">handleTheHappyPath</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'🚫  Oh noes!'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h2>Await</h2>
<pre class="language-javascript " style="counter-reset: linenumber 0"><code class="language-javascript">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getSomeDataFromAnAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">handleTheHappyPath</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>

  <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'🚫  Oh noes!'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>How to create a global .gitignore file to define a list of rules for ignoring files in every single Git repository on your computer</title>
      <link href="https://thomasrigby.com/articles/global-gitignore-file/"/>
      <id>https://thomasrigby.com/articles/global-gitignore-file/</id>
      <published>2021-08-06T00:00:00Z</published>
      <updated>2021-08-06T00:00:00Z</updated>
      <summary type="html">
        How to create a global .gitignore file to define a list of rules for ignoring files in every single Git repository on your computer
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/R-ymqa_Pfx-300.jpeg" alt="GitHub's Octocat logo" />
          
          <p>Unfortunately, this has happened to the best of us at some point, amirite?!</p>
<img srcset="https://thomasrigby.com/images/8haCY92oMt-199.webp 199w, https://thomasrigby.com/images/8haCY92oMt-199.jpeg 199w" sizes="(max-width: 199px) 199px" src="https://thomasrigby.com/images/8haCY92oMt-199.jpeg" loading="lazy" decoding="async" alt="Screenshot of GitKraken showing a new git ignore file and 30,383 deleted files in the node modules folder" width="199" height="63" style="aspect-ratio: 199/63" />
<p>Inspired by this monstrosity, I decided to do some investigation!</p>
<p>Here is how to create a global <code>.gitignore</code> file to define a list of rules for ignoring files in <em><strong>every single</strong></em> Git repository on your computer…</p>
<pre class="language-bash " style="counter-reset: linenumber 0"><code class="language-bash">
  <span class="token function">touch</span> ~/.gitignore_global
  <span class="token builtin class-name">echo</span> node_modules <span class="token operator">>></span> ~/.gitignore_global
  <span class="token builtin class-name">echo</span> .DS_Store <span class="token operator">>></span> ~/.gitignore_global
  <span class="token builtin class-name">echo</span> .vscode <span class="token operator">>></span> ~/.gitignore_global
  <span class="token function">git</span> config <span class="token parameter variable">--global</span> core.excludesfile ~/.gitignore_global

</code></pre>
<p>For more handy git tips: <a href="https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files#configuring-ignored-files-for-all-repositories-on-your-computer">RTFM 😉</a></p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Dotenv for bash</title>
      <link href="https://thomasrigby.com/articles/dotenv-for-bash/"/>
      <id>https://thomasrigby.com/articles/dotenv-for-bash/</id>
      <published>2021-10-07T00:00:00Z</published>
      <updated>2021-10-07T00:00:00Z</updated>
      <summary type="html">
        Sometimes you need to access &lt;code&gt;process.env&lt;/code&gt; in a bash script&amp;hellip;
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/U47iNiCllB-300.jpeg" alt="Command line terminal" />
          
          <p>I have, on occasion, had to use the same secret variables in my codebase (JavaScript) and my build scripts (Bash).</p>
<h2>Shut up and show me the code!</h2>
<pre class="language-bash " style="counter-reset: linenumber 0"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">egrep</span> <span class="token parameter variable">-v</span> <span class="token string">'^#'</span> .env <span class="token operator">|</span> <span class="token function">xargs</span><span class="token variable">)</span></span>
</code></pre>
<h2>Back to the beginning</h2>
<p>A common pattern to keep some variables hidden from prying eyes involves storing them in an <code>.env</code> file in the root of your project <strong>and not committing it to your repository</strong>.</p>
<pre class="language-bash " style="counter-reset: linenumber 0"><code class="language-bash"><span class="token comment"># .env</span>
<span class="token assign-left variable">SUPER_SECRET_API_KEY</span><span class="token operator">=</span>q1we2rty3uiop4

<span class="token comment">#.gitignore</span>
.env
.env*
<span class="token operator">!</span>.env-example
</code></pre>
<p>Using the extremely popular <a href="https://www.npmjs.com/package/dotenv">dotenv</a> npm package allows us to reference the variables in our codebase.</p>
<pre class="language-javascript " style="counter-reset: linenumber 0"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">SUPER_SECRET_API_KEY</span> <span class="token punctuation">}</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">;</span>
<span class="token comment">// or</span>
<span class="token keyword">const</span> key <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SUPER_SECRET_API_KEY</span><span class="token punctuation">;</span>
</code></pre>
<p>This is great! And it works really well!</p>
<p>One of the things I use <code>.env</code> for is defining my environment locally. When I deploy my code through the CI Pipeline, this environment variable is available without me defining it: <code>ENV=production</code> or <code>ENV=development</code>. Exposing this to my codebase using <em>dotenv</em> allows me to do stuff like;</p>
<pre class="language-javascript " style="counter-reset: linenumber 0"><code class="language-javascript">  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">ENV</span> <span class="token punctuation">}</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Do production version</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// Do non-prod version</span>
  <span class="token punctuation">}</span>
</code></pre>
<p>As it happens, I also use my <code>ENV</code> variable in bash scripts, for example;</p>
<pre class="language-bash " style="counter-reset: linenumber 0"><code class="language-bash">  <span class="token comment"># start.sh</span>

  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$(</span>ENV<span class="token variable">)</span></span> <span class="token operator">=</span> <span class="token string">'production'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token comment"># Run the build-production script</span>
    <span class="token comment"># This will strip logs, minify, uglify, and all that good stuff</span>
  <span class="token keyword">else</span>
    <span class="token comment"># Run the watch script</span>
  <span class="token keyword">fi</span>
</code></pre>
<pre class="language-bash " style="counter-reset: linenumber 0"><code class="language-bash">  <span class="token assign-left variable">ENV</span><span class="token operator">=</span>production <span class="token function">bash</span> start.sh
</code></pre>
<p>Notice how I have to define <code>ENV</code> inline here. That's because bash can't read the <code>.env</code> file.</p>
<p>If you wanted to permanently expose that variable to bash (so you don't have to type it out every single time), you would <code>export</code> it;</p>
<pre class="language-bash " style="counter-reset: linenumber 0"><code class="language-bash">  <span class="token builtin class-name">export</span> ENV <span class="token operator">=</span> production

  <span class="token builtin class-name">echo</span> <span class="token variable">$ENV</span>   <span class="token comment"># production</span>
  <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span>ENV<span class="token variable">)</span></span> <span class="token comment"># production</span>
</code></pre>
<p>This is all well and good… until you have 5, 10, 100 variables to export! 🙄</p>
<p>Enter the handy snippet! 🎉</p>
<pre class="language-bash " style="counter-reset: linenumber 0"><code class="language-bash">  <span class="token builtin class-name">export</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">egrep</span> <span class="token parameter variable">-v</span> <span class="token string">'^#'</span> .env <span class="token operator">|</span> <span class="token function">xargs</span><span class="token variable">)</span></span>
</code></pre>
<p>By looping through every line in the <code>.env</code> file and <code>export</code>ing it as a bash variable (unless, of course, it begins with a <code>#</code> - that's a comment 😁), we can save ourselves, potentially hours of typing!</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>The three rules of engineering</title>
      <link href="https://thomasrigby.com/articles/the-three-rules-of-engineering/"/>
      <id>https://thomasrigby.com/articles/the-three-rules-of-engineering/</id>
      <published>2022-05-04T00:00:00Z</published>
      <updated>2022-05-04T00:00:00Z</updated>
      <summary type="html">
        
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/s81COXvK4n-300.jpeg" alt="claw hammer and nails" />
          
          <ol>
<li><strong>Always use the right tool for the job</strong></li>
<li><strong>The right tool is always a hammer</strong></li>
<li><strong>Anything can be used as a hammer</strong></li>
</ol>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Trim trailing slash</title>
      <link href="https://thomasrigby.com/articles/trim-trailing-slash/"/>
      <id>https://thomasrigby.com/articles/trim-trailing-slash/</id>
      <published>2022-09-01T00:00:00Z</published>
      <updated>2022-09-01T00:00:00Z</updated>
      <summary type="html">
        Sometimes a URL has a trailing slash, sometimes it doesn&#39;t. If we can&#39;t be certain, we need to handle either eventuality.
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/U7wC5ZHbkV-300.jpeg" alt="silver scissors on pink surface" />
          
          <p>Sometimes a URL has a trailing slash, sometimes it doesn't. If we can't be certain, we need to handle either eventuality.</p>
<h2>Shut up and give me the code!</h2>
<pre class="language-javascript " style="counter-reset: linenumber 0"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">trimTrailingSlash</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'/'</span> <span class="token operator">?</span> x <span class="token operator">:</span> x<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2>Let's break that down</h2>
<p>First off we're creating an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">arrow function</a> that will accept an input that we're calling <code>x</code>.</p>
<p>Inside the function, <code>x</code> is <code>split</code> into individual characters creating an array. The array is reversed using, well, <code>reverse()</code>. This means we can check the <em>first</em> character (<code>[0]</code>) instead of having to work out what the <em>last</em> character is - smart!</p>
<p>If that character does not equal (<code>!==</code>) a slash simply return the given string. Bouncing out of a function as soon as possible keeps our code quick!</p>
<p>If the character is a trailing slash, we want to get rid of it; to return part of a string, we can use <code>substring</code>.</p>
<p>Substring takes two parameters: the starting index and the finishing index. We will start at <code>0</code> which is the very first character and finish with the second to last character (the one before the <code>/</code>).</p>
<p>To figure what that number is we, again, <code>split</code> the string into an array and use the total number of items (<code>.length</code>) minus 1.</p>
<h2>Alternative solution!</h2>
<p>Using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith"><code>String.prototype.endsWith()</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice"><code>String.prototype.slice()</code></a>, we can shorten this function - and make it a little more readable! 🎉</p>
<pre class="language-javascript " style="counter-reset: linenumber 0"><code class="language-javascript">  <span class="token keyword">const</span> <span class="token function-variable function">trimTrailingSlash</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">?</span> x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> x<span class="token punctuation">;</span>
</code></pre>
<p><code>.endsWith()</code> works exactly how you would imagine: if the string <em>ends with</em> the given character, the method returns <code>true</code>, otherwise it returns <code>false</code>.</p>
<h2>Conclusion</h2>
<p>To trim a trailing slash from a URL requires two operations;</p>
<ol>
<li>We must determine if the last character is a slash</li>
<li>If it is, we must remove the slash</li>
</ol>
<p>Each of these steps can be performed in several ways, you can mix-and-match them how you want.</p>
<p>I've not done any performance testing on these so I couldn't tell you which is fastest when trimming the trailing slash from 40,000 URLs but, unless you <em>are</em> working with 40,000 URLs, just pick the one you feel is the most readable.</p>

        ]]>
      </content>
    </entry>
    
    <entry>
      <title>Quick and dirty server 2</title>
      <link href="https://thomasrigby.com/articles/quick-and-dirty-server-2/"/>
      <id>https://thomasrigby.com/articles/quick-and-dirty-server-2/</id>
      <published>2022-09-07T00:00:00Z</published>
      <updated>2022-09-07T00:00:00Z</updated>
      <summary type="html">
        Sometimes you just want to serve a static site without installing all kinds of stuff (2022 Edition)
      </summary>
      <content type="html">
        <![CDATA[
          
            <img src="https://thomasrigby.com/images/CVMeaAXTQ2-300.jpeg" alt="A python" />
          
          <p>I wrote last year about spinning up a <a href="https://thomasrigby.com/articles/quick-and-dirty-server/">quick and dirty server</a> using <a href="https://www.python.org/">Python</a>.</p>
<p>Since then, I have moved to using Python 3 (woop woop!) and, the first time I ran my funky little <code>srv 1337</code> function I got an error! 😱</p>
<h2>&quot;No module named SimpleHTTPServer&quot;</h2>
<p>According to the <a href="https://docs.python.org/2/library/simplehttpserver.html">Python 2.7 documentation</a>…</p>
<blockquote>
<p>The SimpleHTTPServer module has been merged into http.server in Python 3.</p>
</blockquote>
<p>So, the simple-enough solution is to replace <code>SimpleHTTPServer</code> with <code>http.server</code>.</p>
<ol>
<li>Navigate to the folder you want to serve</li>
<li><code>python -m http.server</code></li>
<li>Open <code>http://localhost:8000</code></li>
</ol>
<h3>What if PORT 8000 is in use?</h3>
<p>Pass a different port number like this: <code>python -m http.server %%PORT_NUMBER%%</code></p>
<p>If you want it to be <em>even simpler</em> - stick this somewhere in your bash config!</p>
<pre class="language-bash " style="counter-reset: linenumber 0"><code class="language-bash"><span class="token function-name function">srv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  python <span class="token parameter variable">-m</span> http.server <span class="token variable">$1</span>
<span class="token punctuation">}</span>
</code></pre>
<p>As before, it doesn't come with any of the fancy stuff that other &quot;local server&quot; plugins might come with like hot reloading or compiling Scss but, if all you want is a small static site launching, why reach for another dependency?</p>

        ]]>
      </content>
    </entry>
</feed>
